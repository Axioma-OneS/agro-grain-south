#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет строку с результатом согласования рецензента в ТЧ РезультатыСогласования.
//
// Параметры:
//   ТочкаМаршрута         - ТочкаМаршрутаБизнесПроцессаСсылка.СогласованиеДоговоров - точка, в которой находится бизнес-процесс.
//   Рецензент             - СправочникСсылка.Пользователи                         - исполнитель задачи по согласованию.
//   РезультатСогласования - ПеречислениеСсылка.РезультатыСогласования             - результат согласования.
//   Комментарий           - Строка                                                - комментарий рецензента.
//   ДатаИсполнения        - Дата                                                  - дата выполнения задачи по
//                                                                                   согласованию рецензентом.
//
Процедура ДобавитьРезультатСогласования(Знач ТочкаМаршрута,
	                                    Знач Рецензент,
	                                    Знач РезультатСогласования,
	                                    Знач Комментарий,
	                                    Знач ДатаИсполнения) Экспорт
	
	НоваяСтрока                       = РезультатыСогласования.Добавить();
	НоваяСтрока.ТочкаМаршрута         = ТочкаМаршрута;
	НоваяСтрока.Рецензент             = Рецензент;
	НоваяСтрока.РезультатСогласования = РезультатСогласования;
	НоваяСтрока.Комментарий           = Комментарий;
	НоваяСтрока.ДатаСогласования      = ДатаИсполнения;
	
	Если БизнесПроцессы.СогласованиеДоговоров.ИспользуетсяВерсионированиеПредмета(Предмет.Метаданные().ПолноеИмя()) Тогда
		НоваяСтрока.НомерВерсии = БизнесПроцессы.СогласованиеДоговоров.НомерПоследнейВерсииПредмета(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа.
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения:
	// Чтение:    Без ограничения.
	// Изменение: Не используется.
	
	// Чтение, Изменение: набор №0.
	Строка = Таблица.Добавить();
	Строка.ЗначениеДоступа = Перечисления.ДополнительныеЗначенияДоступа.ДоступРазрешен;
	
КонецПроцедуры 

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЗаполнитьБизнесПроцессНаОснованииДоговора(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьБизнесПроцесс();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Дата согласования должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ДатаСогласования) И ДатаСогласования < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата согласования должна быть не меньше даты бизнес-процесса %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаСогласования",
			,
			Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДокументПредмет.Согласован
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСогласован,
		|	ДокументПредмет.Статус КАК Статус,
		|	ДокументПредмет.Ссылка КАК Предмет
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДокументПредмет
		|ГДЕ
		|	ДокументПредмет.Ссылка = &Предмет");
			
		Запрос.УстановитьПараметр("Предмет", Предмет);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
					
		// Документ уже согласован - нет смысла начинать согласование
		Если Выборка.ЕстьОшибкиСогласован Тогда
			
			ТекстОшибки = НСтр("ru='%Предмет% в статусе ""%Статус%"" не нуждается в согласовании'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Предмет%", Выборка.Предмет);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%",  Выборка.Статус);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"Предмет",
				,
				Отказ);
				
			Возврат;
				
		КонецЕсли;
		
		// Нет прикрепленных файлов	
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	1 КАК Поле1
		                      |ИЗ
		                      |	Справочник.ДоговорыКонтрагентовПрисоединенныеФайлы КАК ДоговорыКонтрагентовПрисоединенныеФайлы
		                      |ГДЕ
		                      |	НЕ ДоговорыКонтрагентовПрисоединенныеФайлы.ПометкаУдаления
		                      |	И НЕ ДоговорыКонтрагентовПрисоединенныеФайлы.ЭтоГруппа
		                      |	И ДоговорыКонтрагентовПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла");
		Запрос.УстановитьПараметр("ВладелецФайла", Предмет);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда 
		
			ТекстОшибки = НСтр("ru='Не прикреплен ни один файл к договору'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"Предмет",
				,
				Отказ);
				
			Возврат;
			
		КонецЕсли;
			
	КонецЕсли;
			
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДатаНачала            = Дата(1,1,1);
	ДатаОкончания         = Дата(1,1,1);
	РезультатСогласования = Перечисления.РезультатыСогласования.ПустаяСсылка();
	
	РезультатыСогласования.Очистить();
	
	ИнициализироватьБизнесПроцесс();
	
КонецПроцедуры

#Область СобытияМаршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	ШаблонСообщений = НСтр("ru='Не указан %РольСогласующего%'");
	
	Если НЕ ОбщегоНазначенияУТ.ПроверитьСогласующегоБизнесПроцесс(Справочники.РолиИсполнителей.ГенеральныйДиректор) Тогда
		ТекстСообщения = СтрЗаменить(ШаблонСообщений, "%РольСогласующего%", Справочники.РолиИсполнителей.ГенеральныйДиректор);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	Если НЕ ОбщегоНазначенияУТ.ПроверитьСогласующегоБизнесПроцесс(Справочники.РолиИсполнителей.ФинансовыйДиректор) Тогда
		ТекстСообщения = СтрЗаменить(ШаблонСообщений, "%РольСогласующего%", Справочники.РолиИсполнителей.ФинансовыйДиректор);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	Если НЕ ОбщегоНазначенияУТ.ПроверитьСогласующегоБизнесПроцесс(Справочники.РолиИсполнителей.Юрист) Тогда
		ТекстСообщения = СтрЗаменить(ШаблонСообщений, "%РольСогласующего%", Справочники.РолиИсполнителей.Юрист);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ИзменитьСтатусОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	Об = Предмет.ПолучитьОбъект();
	Об.Статус = Перечисления.СтатусыДоговоровКонтрагентов.НаСогласовании;
	Об.Записать();
	
КонецПроцедуры

Процедура СогласованиеФинДиректоромПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = СоздатьЗадачу(ТочкаМаршрутаБизнесПроцесса);
	ФормируемыеЗадачи.Добавить(Задача);
	
КонецПроцедуры

Процедура СогласованФинДиректоромПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = (РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано);
	
КонецПроцедуры

Процедура СогласованиеЮритПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = СоздатьЗадачу(ТочкаМаршрутаБизнесПроцесса);
	ФормируемыеЗадачи.Добавить(Задача);
	
КонецПроцедуры

Процедура СогласованЮристомПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = (РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано);
	
КонецПроцедуры

Процедура СогласованиеРукПодразделенияПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = СоздатьЗадачу(ТочкаМаршрутаБизнесПроцесса);              
	ПодразделениеАвтора       = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Автор, "Подразделение", Истина);
	РуководительПодразделения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодразделениеАвтора, "ТекущийРуководитель", Истина);
	Если ПодразделениеАвтора = Справочники.СтруктураПредприятия.ПустаяСсылка() 
		Или РуководительПодразделения = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда 
		ТекстСообщения = СтрШаблон(НСтр("ru='У автора бизнес процесса: %1, проверьте подразделение и руководителя подразделения.
										|Задача будет назначена на автора БП!'"), 
										Автор);
		УстановкаИсполнителяВСлучаиПроблемСОпределением(Задача, ТекстСообщения);
	Иначе 
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		                      |	Пользователи.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Справочник.Пользователи КАК Пользователи
		                      |ГДЕ
		                      |	Пользователи.ФизическоеЛицо = &ФизическоеЛицо
		                      |	И НЕ Пользователи.ПометкаУдаления");
		Запрос.УстановитьПараметр("ФизическоеЛицо", РуководительПодразделения);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда 
			ТекстСообщения = СтрШаблон(НСтр("ru='У руководителя подразделения: %1, не указан пользователь.
										|Задача будет назначена на автора БП!'"), 
										Автор);
			УстановкаИсполнителяВСлучаиПроблемСОпределением(Задача, ТекстСообщения);	
		Иначе 
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Задача.Исполнитель = Выборка.Ссылка;
		КонецЕсли;	
		
	КонецЕсли;	
	ФормируемыеЗадачи.Добавить(Задача);
	
КонецПроцедуры

Процедура СогласованРукПодразделенияПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = (РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано);

КонецПроцедуры

Процедура СогласованиеГенДирПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = СоздатьЗадачу(ТочкаМаршрутаБизнесПроцесса);
	ФормируемыеЗадачи.Добавить(Задача);
	
КонецПроцедуры

Процедура СогласованГенДиректоромПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = (РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано);
	
КонецПроцедуры

Процедура ОбработкаРезультатовСогласованияОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредметОбъект = Предмет.ПолучитьОбъект();
	
	НеобходимоСогласовать = (Не ПредметОбъект.ПометкаУдаления И Не ПредметОбъект.Согласован);
	
	// Если документ уже согласован - ничего делать не требуется
	Если НеобходимоСогласовать Тогда
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Предмет);
		Исключение
			
			ТекстОшибки = НСтр("ru='В ходе обработки результатов согласования не удалось заблокировать %Предмет%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Предмет%",        Предмет);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстОшибки;
				
		КонецПопытки;
		
		Попытка
			ПредметОбъект.Согласован = Истина;
			
			Если ПредметОбъект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован Тогда
				Если НЕ ПредметОбъект.УстановитьСтатус("Подтвержден", ) Тогда
					ТекстОшибкиСтатус = НСтр("ru='Невозможно изменить статус'");
					ВызватьИсключение ТекстОшибкиСтатус;
				КонецЕсли;
				ПредметОбъект.ДатаСогласования = ТекущаяДатаСеанса();
			КонецЕсли;
			
			ПредметОбъект.Записать();
			
			РазблокироватьДанныеДляРедактирования(Предмет);
			
		Исключение
			
			РазблокироватьДанныеДляРедактирования(Предмет);
			
			ТекстОшибки = НСтр("ru='Не удалось записать %Предмет%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Предмет%",        Предмет);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки
		
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОзнакомитьсяСРезультатамиПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = СоздатьЗадачу(ТочкаМаршрутаБизнесПроцесса);
	Задача.Исполнитель = Автор;
	ФормируемыеЗадачи.Добавить(Задача);
	
КонецПроцедуры

Процедура ОзнакомитьсяСРезультатамиОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	Об = Предмет.ПолучитьОбъект();
	Об.Статус = ?(РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано, 
					Перечисления.СтатусыДоговоровКонтрагентов.Действует, 
					Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован); 
	Об.Записать();
	
	ДатаЗавершения = ТекущаяДатаСеанса();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьБизнесПроцессНаОснованииДоговора(ДокументОснование)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Предмет,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.Приоритет В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Приоритеты.Ссылка КАК Приоритет
	|				ИЗ
	|					Справочник.Приоритеты КАК Приоритеты
	|				УПОРЯДОЧИТЬ ПО
	|					Приоритеты.РеквизитДопУпорядочивания)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
	|		КОГДА ДоговорыКонтрагентов.Приоритет В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Приоритеты.Ссылка КАК Приоритет
	|				ИЗ
	|					Справочник.Приоритеты КАК Приоритеты
	|				УПОРЯДОЧИТЬ ПО
	|					Приоритеты.РеквизитДопУпорядочивания УБЫВ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Обычная)
	|	КОНЕЦ КАК Важность,
	|	ДоговорыКонтрагентов.Статус КАК Статус,
	|	ЛОЖЬ КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыДоговоровКонтрагентов.НеСогласован);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Предмет,
		Выборка.Статус,
		Выборка.ЕстьОшибкиПроведен,
		Выборка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("Предмет") Тогда
		
		ТипПредмета = ТипЗнч(ДанныеЗаполнения.Предмет);
		
		Если ТипПредмета = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ЗаполнитьБизнесПроцессНаОснованииДоговора(ДанныеЗаполнения.Предмет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьБизнесПроцесс()
	
	Автор = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция СоздатьЗадачу(Знач ТочкаМаршрутаБизнесПроцесса)
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	
	МассиОписание = Новый Массив;
	МассиОписание.Добавить(СтрШаблон("Описание БП: %1", Наименование));
	МассиОписание.Добавить(СтрШаблон("========================= %1", Символы.ПС));
	Для Каждого СтрокаРезультатСогласования Из Ссылка.РезультатыСогласования Цикл 
		Если СтрНайти(СтрокаРезультатСогласования.Комментарий,"Результат выполнения") = 0 Тогда 
			Продолжить;			
		КонецЕсли;	
		МассиОписание.Добавить(СтрокаРезультатСогласования.Комментарий);
	КонецЦикла;
	
	Задача.Дата                          = ТекущаяДатаСеанса();
	Задача.Автор                         = Автор;
	Задача.Наименование                  = ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи;
	Задача.Описание                      = СтрСоединить(МассиОписание, Символы.ПС);
	Задача.Предмет                       = Предмет;
	Задача.Важность                      = Важность;
	Задача.РольИсполнителя               = ТочкаМаршрутаБизнесПроцесса.РольИсполнителя;
	Задача.ОсновнойОбъектАдресации       = ТочкаМаршрутаБизнесПроцесса.ОсновнойОбъектАдресации;
	Задача.ДополнительныйОбъектАдресации = ТочкаМаршрутаБизнесПроцесса.ДополнительныйОбъектАдресации;
	Задача.БизнесПроцесс                 = Ссылка;
	Задача.СрокИсполнения                = ДатаСогласования;
	Задача.ТочкаМаршрута                 = ТочкаМаршрутаБизнесПроцесса;
	
	Возврат Задача;

КонецФункции

Функция УстановкаИсполнителяВСлучаиПроблемСОпределением(Задача, Знач ТекстСообщения)
	ЗаписьЖурналаРегистрации("БизнесПроцесс.СогласованиеДоговоров.МодульОбъекта", 
									УровеньЖурналаРегистрации.Предупреждение, 
									Метаданные.БизнесПроцессы.СогласованиеДоговоров,
									,
									ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Задача.Исполнитель = Автор;	
КонецФункции	

#КонецОбласти

#КонецОбласти

#КонецЕсли
