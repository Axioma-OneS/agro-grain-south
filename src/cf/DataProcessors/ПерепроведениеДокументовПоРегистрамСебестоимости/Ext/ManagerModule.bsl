#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПерепровестиДокументы(Период, МассивОрганизаций, ОтключатьДатыЗапрета = Ложь) Экспорт
	
	Период = НачалоМесяца(Период);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияДляЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru='Начало проведения документов за период'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ " " + РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(Период));
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(НачалоМесяца(Период),, МассивОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", 			Период);
	Запрос.УстановитьПараметр("КонецПериода",  			КонецМесяца(Период));
	Запрос.УстановитьПараметр("МассивОрганизаций",  	МассивОрганизаций);
	Запрос.УстановитьПараметр("ТипыДокументовОСиНМА",	РасчетСебестоимостиПрикладныеАлгоритмы.ТипыДокументовОСиНМА());
	
	РегистрыСебестоимости = РасчетСебестоимости.ИсходящиеДанныеМеханизма();
	ИменаРегистров = "";
	ТекстЗапроса = "";
	ТекстЗапросаДвиженияДругихПериодов = "";
	
	РегистраторыВДругихПериодах = Новый Соответствие;
	
	ШаблонЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ТекстИмяРегистра"" КАК ИмяРегистра,
	|	Т.Регистратор КАК Регистратор
	|ИЗ
	|	ТекстИмяРегистра КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ОтборПоОрганизации
	|	И НЕ ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ТипыДокументовОСиНМА)";
	
	ШаблонЗапросаДвиженияДругихПериодов =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТекстИмяТаблицы
	|ИЗ
	|	ТекстИмяРегистра КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Отбор
	|	ПО Т.Регистратор = Отбор.Регистратор
	|ГДЕ
	|	НЕ (Т.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Регистратор";
	
	Для Каждого КлючИЗначение Из РегистрыСебестоимости Цикл
		
		Если НЕ Метаданные.РегистрыНакопления.Содержит(КлючИЗначение.Ключ)
		 ИЛИ КлючИЗначение.Ключ = Метаданные.РегистрыНакопления.ТоварыОрганизаций
		//++ Локализация
		 ИЛИ КлючИЗначение.Ключ = Метаданные.РегистрыНакопления.НДСПредъявленный
		//-- Локализация
		 ИЛИ КлючИЗначение.Ключ = Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН
		 ИЛИ КлючИЗначение.Ключ = Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4 Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеРегистра = КлючИЗначение.Ключ;
		
		ИменаРегистров = ИменаРегистров + ?(ИменаРегистров = "", "", ", ") + МетаданныеРегистра.Имя;
		
		ЕстьОрганизация = (МетаданныеРегистра.Измерения.Найти("Организация") <> Неопределено);
		
		ТекущийШаблон = СтрЗаменить(ШаблонЗапроса, "ТекстИмяРегистра", МетаданныеРегистра.ПолноеИмя());
		ТекущийШаблон = СтрЗаменить(ТекущийШаблон, "&ОтборПоОрганизации",
			?(ЕстьОрганизация, "Т.Организация В (&МассивОрганизаций)", "Т.АналитикаУчетаПоПартнерам.Организация В (&МассивОрганизаций)"));
		
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "", Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС) + ТекущийШаблон;
		
		ТекущийШаблон = СтрЗаменить(ШаблонЗапросаДвиженияДругихПериодов, "ТекстИмяРегистра", МетаданныеРегистра.ПолноеИмя());
		ТекущийШаблон = СтрЗаменить(ТекущийШаблон, "ТекстИмяТаблицы", СтрЗаменить(МетаданныеРегистра.ПолноеИмя(), ".", "_"));
		
		ТекстЗапросаДвиженияДругихПериодов = ТекстЗапросаДвиженияДругихПериодов
			+ ?(ТекстЗапросаДвиженияДругихПериодов = "", "", Символы.ПС + ";" + Символы.ПС)
			+ ТекущийШаблон;
			
		РегистраторыВДругихПериодах.Вставить(МетаданныеРегистра.ПолноеИмя(), Новый Массив);
		
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.ИмяРегистра,
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторыСРегистрами
	|ИЗ
	|(" + ТекстЗапроса + ") КАК Т
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(Т.Регистратор) В
	|	(ТИП(Документ.КорректировкаРегистров),
	|	 ТИП(Документ.РасчетСебестоимостиТоваров))
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Регистратор
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	ВТРегистраторыСРегистрами КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Регистратор";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстЗапросаДвиженияДругихПериодов;
	
	Запрос.Выполнить();
	
	Для Каждого КлючИЗначение Из ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(РегистраторыВДругихПериодах) Цикл
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор
		|ИЗ
		|	ТекстИмяТаблицы КАК Т";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТекстИмяТаблицы", СтрЗаменить(КлючИЗначение.Ключ, ".", "_"));
		
		РегистраторыВДругихПериодах.Вставить(
			КлючИЗначение.Ключ,
			Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"));
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.ИмяРегистра КАК ИмяРегистра,
	|	Т.Регистратор КАК Регистратор
	|ИЗ
	|	ВТРегистраторыСРегистрами КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	ИмяРегистра
	|ИТОГИ ПО
	|	Регистратор
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ВыборкаРегистраторы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РегистраторыСОшибками = Новый ТаблицаЗначений;
	РегистраторыСОшибками.Колонки.Добавить("Регистратор");
	РегистраторыСОшибками.Колонки.Добавить("ТекстОшибки");
	
	Пока ВыборкаРегистраторы.Следующий() Цикл
		
		Регистратор = ВыборкаРегистраторы.Регистратор;
		МетаданныеДокумента = Регистратор.Метаданные();
		
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		
		ИменаРегистров = "";
		
		ЭтоРегламентнаяОперация = Ложь;
		//++ Локализация
		ЭтоРегламентнаяОперация =
		 	ТипЗнч(Регистратор) = Тип("ДокументСсылка.РаспределениеНДС");
		//-- Локализация
		
		ДополнительныеСвойства = Новый Структура;
		
		ВыполненоВосстановлениеДвижений = Ложь;
		
		Если ЭтоРегламентнаяОперация Тогда
			
			// Для этих документов частичное проведение по регистрам не поддерживается.
			ДокументОперации = Регистратор.ПолучитьОбъект();
			
			ДокументОперации.ДополнительныеСвойства.Вставить(РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
			
			Попытка
				ДокументОперации.Записать(РежимЗаписиДокумента.Проведение);
				ВыполненоВосстановлениеДвижений = Истина;
			Исключение
				
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				НовыйРегистратор = РегистраторыСОшибками.Добавить();
				НовыйРегистратор.Регистратор = Регистратор;
				НовыйРегистратор.ТекстОшибки = ТекстОшибки;
				
			КонецПопытки; 
			
		Иначе
			
			Выборка = ВыборкаРегистраторы.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ИменаРегистров = ИменаРегистров + ?(ИменаРегистров = "", "", ", ") + СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.ИмяРегистра, ".",, Истина)[1];
			КонецЦикла;
			
			ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(
				Регистратор,
				ДополнительныеСвойства,
				РежимПроведенияДокумента.Неоперативный);
				
			Попытка
				Документы[МетаданныеДокумента.Имя].ИнициализироватьДанныеДокумента(
					Регистратор,
					ДополнительныеСвойства,
					ИменаРегистров);
			Исключение
				
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				НовыйРегистратор = РегистраторыСОшибками.Добавить();
				НовыйРегистратор.Регистратор = Регистратор;
				НовыйРегистратор.ТекстОшибки = ТекстОшибки;
				
				Продолжить;
				
			КонецПопытки; 
				
			Выборка.Сбросить();
			
			Пока Выборка.Следующий() Цикл
				
				ИмяРегистраНакопления = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.ИмяРегистра, ".")[1];
				
				Если НЕ ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("Таблица" + ИмяРегистраНакопления) Тогда
					// У документа есть только расчетные движения, которые будут пересчитаны при закрытии месяца.
					Продолжить;
				КонецЕсли;
				
				ЕстьДвиженияВДругихПериодах = РегистраторыВДругихПериодах.Получить(Выборка.ИмяРегистра).Найти(Регистратор) <> Неопределено;
				
				Если ЕстьДвиженияВДругихПериодах Тогда
				
					Запрос.Текст =
					"ВЫБРАТЬ
					|	*
					|ИЗ
					|	ТекстИмяТаблицы КАК Т
					|ГДЕ
					|	Т.Регистратор = &Регистратор";
					
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТекстИмяТаблицы", СтрЗаменить(Выборка.ИмяРегистра, ".", "_"));
					
					ВыборкаДвижений = Запрос.Выполнить().Выбрать();
					
				КонецЕсли;
				
				Попытка
					
					НачатьТранзакцию();
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить(Выборка.ИмяРегистра + ".НаборЗаписей");
					ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					Блокировка.Заблокировать();
					
					НаборЗаписей = РегистрыНакопления[ИмяРегистраНакопления].СоздатьНаборЗаписей();
					НаборЗаписей.ДополнительныеСвойства.Вставить(РасчетСебестоимостиПрикладныеАлгоритмы.ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
					НаборЗаписей.ДополнительныеСвойства.Вставить("ДатаРегистратора", Период);
					НаборЗаписей.ДополнительныеСвойства.Вставить("НеСохранятьРасчетныеДвижения", Истина);
					
					// Добавим в набор только первичные движения документа в текущем периоде.
					Для Каждого СтрокаТаблицыДвижений Из ДополнительныеСвойства.ТаблицыДляДвижений["Таблица" + ИмяРегистраНакопления] Цикл
						
						Если НачалоМесяца(СтрокаТаблицыДвижений.Период) = Период Тогда
							ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаТаблицыДвижений);
						КонецЕсли;
						
					КонецЦикла;
					
					Если ЕстьДвиженияВДругихПериодах Тогда
						Пока ВыборкаДвижений.Следующий() Цикл
							ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаДвижений);
						КонецЦИкла;
					КонецЕсли;
					
					Если ОтключатьДатыЗапрета Тогда
						ДатыЗапретаИзмененияУТ.ОтключитьПроверкуДатыЗапретаИзменения(НаборЗаписей);
					КонецЕсли;
					
					НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
					НаборЗаписей.Записывать = Истина;
					НаборЗаписей.Записать(Истина);
					НаборЗаписей.Очистить();
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
					ОтменитьТранзакцию();
					
					НовыйРегистратор = РегистраторыСОшибками.Добавить();
					НовыйРегистратор.Регистратор = Регистратор;
					НовыйРегистратор.ТекстОшибки = ТекстОшибки;
					
				КонецПопытки; 
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияДляЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru='Окончание проведения документов за период'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ " " + РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(Период) + Символы.ПС
			+ НСтр("ru='Проведено документов'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ ": " + СокрЛП(ВыборкаРегистраторы.Количество()));
	
	Возврат РегистраторыСОшибками;
	
КонецФункции


Функция ОрганизацииДляПерепроведения(Период, МассивОрганизаций) Экспорт
	
	ВсеПараметры = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ПрочитатьВсеПараметры();
	РезультатыПроверок = ВсеПараметры.Получить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости).ЗначенияПараметров.РезультатыПроверок;
	
	ДляПерепроведения = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивОрганизаций);
	
	Если РезультатыПроверок <> Неопределено Тогда
		
		РезультатыПроверок = РезультатыПроверок.Получить();
		
		Если ТипЗнч(РезультатыПроверок) = Тип("Соответствие") Тогда
			
			РезультатыПроверок = РезультатыПроверок.Получить(НачалоМесяца(Период));
			
			Если ТипЗнч(РезультатыПроверок) = Тип("Соответствие") Тогда
				
				Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
					
					РезультатПоОрганизации = РезультатыПроверок.Получить(ТекущаяОрганизация);
					
					Если ТипЗнч(РезультатПоОрганизации) = Тип("Структура") Тогда
						
						Если НЕ РезультатПоОрганизации.СОшибками Тогда
							ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ДляПерепроведения, ТекущаяОрганизация);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДляПерепроведения;
	
КонецФункции

Процедура СохранитьРезультатыОбработки(Период, МассивОрганизаций, Игнорировать = Ложь, Успешно = Ложь, ТаблицаДокументов = Неопределено) Экспорт
	
	ВсеПараметры = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ПрочитатьВсеПараметры();
	РезультатыПроверок = ВсеПараметры.Получить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости).ЗначенияПараметров.РезультатыПроверок;
	
	// Соответствие
	// 	Ключ - Месяц
	// 	Значение - Соответствие
	//		Ключ - Организация
	//		Значение - Структура
	//			Игнорировать - Булево
	//			Успешно - Булево
	//			СОшибками - Булево
	//			Ошибки - ТаблицаЗначений
	
	Если РезультатыПроверок <> Неопределено Тогда
		РезультатыПроверок = РезультатыПроверок.Получить();
	Иначе
		РезультатыПроверок = Новый Соответствие;
	КонецЕсли;
	
	РезультатыЗаМесяц = РезультатыПроверок.Получить(НачалоМесяца(Период));
	Если РезультатыЗаМесяц = Неопределено Тогда
		РезультатыЗаМесяц = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
		
		РезультатПоОрганизации = Новый Структура;
		
		РезультатПоОрганизации.Вставить("Игнорировать", Игнорировать);
		РезультатПоОрганизации.Вставить("Успешно", Успешно);
		РезультатПоОрганизации.Вставить("СОшибками", НЕ Игнорировать И НЕ Успешно);
		РезультатПоОрганизации.Вставить("Ошибки", ТаблицаДокументов);
			
		РезультатыЗаМесяц.Вставить(ТекущаяОрганизация, РезультатПоОрганизации);
		
	КонецЦикла;
	
	РезультатыПроверок.Вставить(НачалоМесяца(Период), РезультатыЗаМесяц);
	
	ВсеПараметры.Получить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости).ЗначенияПараметров.Вставить(
		"РезультатыПроверок",
		Новый ХранилищеЗначения(РезультатыПроверок, Новый СжатиеДанных(9)));
	
	Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().СохранитьВсеПараметры(ВсеПараметры);
	
КонецПроцедуры

Процедура ОчиститьРезультатыОбработки() Экспорт
	
	ВсеПараметры = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ПрочитатьВсеПараметры();
	
	ВсеПараметры.Получить(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости).ЗначенияПараметров.Вставить(
		"РезультатыПроверок",
		Неопределено);
	
	Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().СохранитьВсеПараметры(ВсеПараметры);
	
КонецПроцедуры

Функция ИмяСобытияДляЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru='Исправление ошибок в данных.Перепроведение документов'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецЕсли
