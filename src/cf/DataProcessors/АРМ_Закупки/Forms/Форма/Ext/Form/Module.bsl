///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, Карло Иван
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
/////////////////////////////////////////////////////////////////////////////////////////////////////// 

// TODO РАССТАВИТЬ ПРИЗНАК МОДИФИКАЦИИ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Общее
	Элементы.Страницы.ОтображениеСтраниц 			= ОтображениеСтраницФормы.Нет;
	Элементы.ОсновноеМеню.Пометка 					= Истина;
	УстановитьНадписьТекущейСтраницы();
	Элементы.ПоказатьСообщения.Видимость 			= Ложь;
	Элементы.ГруппаИзменитьНастройка.Доступность 	= Ложь;
	Элементы.УдалитьИЗакрыть.Доступность			= Ложь;
	Элементы.ГруппаСохранить.Видимость 				= Ложь;
	Элементы.ГруппаСохранитьИПерейти.Видимость 		= Ложь;	
	
	// Реестр контрагентов
	РеестрКонтрагентов_ДС_РеестрКонтрагентов.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	// Контрагент
	НастройкиПодключенияКСервисуИППЗаданы = ПартнерыИКонтрагенты.НастройкиПодключенияКСервисуИППЗаданы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекСтраница = Элементы.Страницы.ТекущаяСтраница;
	масТребуетсяУдалить = Новый Массив;

	Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл 
		
		Если Реквизит = "Объект" Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не РеквизитОтноситсяКТекущейСтранице(Реквизит, ТекСтраница) Тогда 	
			масТребуетсяУдалить.Добавить(Реквизит);	
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемыйРеквизит Из масТребуетсяУдалить Цикл 
		Индекс = ПроверяемыеРеквизиты.Найти(УдаляемыйРеквизит);
		ПроверяемыеРеквизиты.Удалить(Индекс);		
	КонецЦикла;
		
	// Спецификация, не стандартные данные
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСпецификация Тогда
		Если Спецификация_СписокПрисоединенныхФайлов.Количество() = 0 Тогда 
			Отказ = Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Поле			= Элементы.СписокПрисоединенныхФайлов;
			СообщениеПользователю.ПутьКДанным 	= Спецификация_СписокПрисоединенныхФайлов;
			СообщениеПользователю.Текст 		= "Присоедините хотя бы один файл";
			СообщениеПользователю.Сообщить();	
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Отказ = Истина;	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ИнициализироватьСтраницы();
	
	Элементы.ГруппаИзменитьНастройка.Доступность 	= Ложь;
	Элементы.УдалитьИЗакрыть.Доступность			= Ложь;
		
	Если ТекущаяСтраница = Элементы.СтраницаОсновноеМеню Тогда 
		Элементы.ГруппаСохранить.Видимость 			= Ложь;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Ложь;	
		Элементы.ГруппаШапкаПрочее.Видимость 		= Ложь;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРеестрКонтрагентов Тогда
		Элементы.ГруппаСохранить.Видимость 			= Ложь;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Ложь;
		Элементы.ГруппаШапкаПрочее.Видимость 		= Ложь;
	
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРеестрДоговоров Тогда
		Элементы.ГруппаСохранить.Видимость 			= Ложь;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Ложь;
		Элементы.ГруппаШапкаПрочее.Видимость 		= Ложь;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКонтрагент Тогда
		Элементы.ГруппаСохранить.Видимость 			= Истина;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Истина;
		Элементы.ГруппаСпецификация.Видимость 		= Ложь;
		Элементы.ГруппаКонтрагент.Видимость 		= Истина;	
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДоговор Тогда
		Элементы.ГруппаСохранить.Видимость 			= Ложь;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Ложь;		
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСпецификация Тогда
		Элементы.ГруппаСохранить.Видимость 			= Истина;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Истина;
		Элементы.ГруппаСпецификация.Видимость 		= Истина;
		Элементы.ГруппаКонтрагент.Видимость 		= Ложь;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПеревозка Тогда
		Элементы.ГруппаСохранить.Видимость 			= Ложь;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Ложь;	
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДопУслуги Тогда
		Элементы.ГруппаСохранить.Видимость 			= Ложь;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Ложь;	
		
	Иначе 
		Элементы.ГруппаСохранить.Видимость 			= Ложь;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Ложь;
		
	КонецЕсли;

КонецПроцедуры


#Область РеестрКонтрагентов

&НаКлиенте
Процедура РеестрКонтрагентов_ВидКонтрагентаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РеестрКонтрагентов_ДС_РеестрКонтрагентов, "ЮрФизЛицо",  РеестрКонтрагентов_ВидКонтрагента, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(РеестрКонтрагентов_ВидКонтрагента));

КонецПроцедуры

#КонецОбласти


#Область Контрагент

&НаКлиенте
Процедура Контрагент_ЮридическийАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Контрагент_НачалоВыбора(Элемент, 
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"), 
			Контрагент_ЮридическийАдрес);
		
КонецПроцедуры

&НаКлиенте
Процедура Контрагент_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Контрагент_НачалоВыбора(Элемент, 
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"), 
			Контрагент_Телефон);
				
КонецПроцедуры

&НаКлиенте
Процедура Контрагент_ПочтовыйАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Контрагент_НачалоВыбора(Элемент, 
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента"), 
			Контрагент_ПочтовыйАдрес);
				
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	
	Если Результат.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда 
		Контрагент_ЮридическийАдрес = Результат.Представление;
		
	ИначеЕсли Результат.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
		Контрагент_Телефон = Результат.Представление;
		
	ИначеЕсли Результат.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента Тогда	
	    Контрагент_ПочтовыйАдрес = Результат.Представление;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область Спецификация

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Спецификация_Партнер) Тогда 
		ПартнерПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БазисПоставкиПриИзменении(Элемент)
	
	Если Спецификация_БазисПоставки = "CPT" Тогда 
		Спецификация_БазисПоставкиПеречисление = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада");		
	ИначеЕсли Спецификация_БазисПоставки = "EXW" Тогда 	
		Спецификация_БазисПоставкиПеречисление = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада");
	Иначе 
		Спецификация_БазисПоставкиПеречисление = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ГородАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ТекстДляАвтоПодбора = СокрЛП(Текст);
	Если СтрДлина(ТекстДляАвтоПодбора) < 3 Тогда
		// Нет вариантов, список пуст, стандартную обработку не надо трогать.
		Возврат;
	КонецЕсли;
	
	Результат = СписокАвтоподбораНаселенногоПункта(ТекстДляАвтоПодбора);
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Результат.Данные;
	// Стандартную обработку отключаем, только если есть наши варианты.
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГородОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Спецификация_Город = ВыбранноеЗначение.Представление;

КонецПроцедуры

&НаКлиенте
Процедура СкладГрузополучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Не ПустаяСтрока(Спецификация_Город) Тогда 
		Результат = СписокПодбораСклады(Спецификация_Город);
		Если Результат.Отказ Тогда
			Возврат;
		КонецЕсли;

		ДанныеВыбора = Результат.Данные;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтавкаНДС_ИзНоменклатуры = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "СтавкаНДС");
	Если СтавкаНДС_ИзНоменклатуры = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20") Тогда 
		Спецификация_СтавкаНДС_Товара = "20%";	
	ИначеЕсли СтавкаНДС_ИзНоменклатуры = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10") Тогда 
		Спецификация_СтавкаНДС_Товара = "10%";
	Иначе 	
		Спецификация_СтавкаНДС_Товара = "0%";
	КонецЕсли;
	
	ПересчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъемТовараПриИзменении(Элемент)
	ПересчитатьСумму();
КонецПроцедуры

&НаКлиенте
Процедура ЦенаТовараСНДСПриИзменении(Элемент)
	ПересчитатьСумму();
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДС_ТовараПриИзменении(Элемент)
	
	Если Спецификация_СтавкаНДС_Товара = "20%" Тогда 
		Спецификация_СтавкаНДСТовараПеречисление = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");		
	ИначеЕсли Спецификация_СтавкаНДС_Товара = "10%" Тогда 	
		Спецификация_СтавкаНДСТовараПеречисление = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10");
	Иначе 
		Спецификация_СтавкаНДСТовараПеречисление = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	КонецЕсли;	
	
	ПересчитатьСумму();
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти


#Область ОбработчикиКомандФормы


#Область СтраницаОсновноеМеню

&НаКлиенте
Процедура ОсновноеМеню(Команда)
	
	Если Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередОсновноеМенюЗавершение", ЭтотОбъект);
		ТекстВопроса       = НСтр("ru = 'Данные не сохранены и будут удалены после выхода. Продолжить?'");
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Да"		, НСтр("ru = 'Да'"));
		СписокКнопок.Добавить("Остаться", НСтр("ru = 'Остаться'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		
	Иначе 
		ПередОсновноеМенюЗавершение("Да", "");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОсновноеМенюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	ОтветНаВопрос = РезультатВопроса;
	
	Если ОтветНаВопрос = "Да" Тогда
		СброситьПометкиКомандШапки(Элементы);
	
		Элементы.ОсновноеМеню.Пометка = Не Элементы.ОсновноеМеню.Пометка;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновноеМеню;
		УстановитьНадписьТекущейСтраницы();
		СтраницыПриСменеСтраницы("", Элементы.СтраницаОсновноеМеню);
		Модифицированность = Ложь;
	КонецЕсли;

КонецПроцедуры	
	
&НаКлиенте
Процедура ПерейтиРеестрКонтрагентов(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	
	Элементы.ПерейтиРеестрКонтрагентов.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРеестрКонтрагентов;
	УстановитьНадписьТекущейСтраницы();
	СтраницыПриСменеСтраницы("", Элементы.СтраницаРеестрКонтрагентов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКонтрагент(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	
	Элементы.ПерейтиКонтрагент.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрагент;
	УстановитьНадписьТекущейСтраницы();
	СтраницыПриСменеСтраницы("", Элементы.СтраницаКонтрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиРеестрДоговоров(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	
	Элементы.ПерейтиРеестрДоговоров.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРеестрДоговоров;
	УстановитьНадписьТекущейСтраницы();
	СтраницыПриСменеСтраницы("", Элементы.СтраницаРеестрДоговоров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиДоговор(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	
	Элементы.ПерейтиДоговор.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДоговор;
	УстановитьНадписьТекущейСтраницы();
	СтраницыПриСменеСтраницы("", Элементы.СтраницаДоговор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиСпецификация(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	
	Элементы.ПерейтиСпецификация.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСпецификация;
	УстановитьНадписьТекущейСтраницы();
	СтраницыПриСменеСтраницы("", Элементы.СтраницаСпецификация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПеревозка(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	
	Элементы.ПерейтиПеревозка.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПеревозка;
	УстановитьНадписьТекущейСтраницы();
	СтраницыПриСменеСтраницы("", Элементы.СтраницаПеревозка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиДопУслуги(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	
	Элементы.ПерейтиДопУслуги.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДопУслуги;
	УстановитьНадписьТекущейСтраницы();
	СтраницыПриСменеСтраницы("", Элементы.СтраницаДопУслуги);
	
КонецПроцедуры

&НаКлиенте
Процедура Выйти(Команда)
	
	ЗавершитьРаботуСистемы(Ложь);
	
КонецПроцедуры

#КонецОбласти


#Область ГруппаОсновнаяКоманднаяПанель

&НаКлиенте
Процедура Изменить(Команда)
	
	Элементы.Страницы.ТекущаяСтраница.ТолькоПросмотр 	= Элементы.Изменить.Пометка;
	Элементы.УдалитьИЗакрыть.Доступность 				= Не Элементы.Изменить.Пометка;
	Модифицированность 									= Не Элементы.Изменить.Пометка;
	
	Элементы.Изменить.Пометка = Не Элементы.Изменить.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИЗакрыть(Команда)
	
	Если Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередУдалитьИЗакрытьЗавершение", ЭтотОбъект);
		ТекстВопроса       = НСтр("ru = 'Данные не сохранены и будут удалены после выхода. Продолжить?'");
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Да"		, НСтр("ru = 'Да'"));
		СписокКнопок.Добавить("Остаться", НСтр("ru = 'Остаться'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		
	Иначе 
		ПередОсновноеМенюЗавершение("Да", "");
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПередУдалитьИЗакрытьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	ОтветНаВопрос = РезультатВопроса;
	
	Если ОтветНаВопрос = "Да" Тогда
		
		УстановитьПометкуУдаления(СсылкаНаОбъект);
		
		ОсновноеМеню(ЭтаФорма.Команды.Найти("ОсновноеМеню"));
		СброситьПометкиКомандШапки(Элементы);
	
		Элементы.ОсновноеМеню.Пометка = Не Элементы.ОсновноеМеню.Пометка;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновноеМеню;
		УстановитьНадписьТекущейСтраницы();
		СтраницыПриСменеСтраницы("", Элементы.СтраницаОсновноеМеню);
		Модифицированность = Ложь;
	КонецЕсли;

КонецПроцедуры	

#КонецОбласти


#Область ДляВсехСтраниц

&НаКлиенте
Процедура СоздатьПартнера(Команда)
	
	ПерейтиКонтрагент(ЭтаФорма.Команды.Найти("ПерейтиКонтрагент"));	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговор(Команда)
	
	ПерейтиДоговор(ЭтаФорма.Команды.Найти("ПерейтиДоговор"));
	
КонецПроцедуры

#КонецОбласти


#Область СтраницаРеестрКонтрагентов

&НаКлиенте
Процедура Контрагент_ДС_РеестрКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "Контрагент_ДС_РеестрКонтрагентовСоздатьДоговорСКонтрагентом" Тогда 
		ПерейтиДоговор(ЭтаФорма.Команды.Найти("ПерейтиДоговор"));		
	КонецЕсли;	
	
КонецПроцедуры  

#КонецОбласти


#Область СтраницаКонтрагент

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	ИННЗаполненКорректно = Истина;
	
	ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");

	Если СтрДлина(СокрЛП(Контрагент_ИНН)) = 12 Тогда 	
		Контрагент_ВидКонтрагента = "ИндивидуальныйПредприниматель";
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель");
		
	ИначеЕсли СтрДлина(СокрЛП(Контрагент_ИНН)) = 10 Тогда	
		Контрагент_ВидКонтрагента = "ЮрЛицо";

	КонецЕсли;
	
	ТекстСообщения = "";
	Если ПустаяСтрока(Контрагент_ИНН) Тогда
		ИННЗаполненКорректно = Ложь;
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Контрагент_ИНН, 
		                                                                          ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо),
		                                                                          ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Контрагент_ИНН",,);
			
	КонецЕсли;
	
	Если ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно) Тогда
		РеквизитыКонтрагента = ПартнерыИКонтрагентыВызовСервера.ДанныеКонтрагентаПоИНН(
		                       ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо),
		                       СокрЛП(Контрагент_ИНН),
		                       УникальныйИдентификатор);
							   
		АдресРеквизитыКонтрагента = ПоместитьВоВременноеХранилище(РеквизитыКонтрагента, УникальныйИдентификатор);
		ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента);
	КонецЕсли;	
	
	Если КонтрагентНайденВ_ИБ(Контрагент_ИНН) Тогда 
		СообщениеПользователю = Новый СообщениеПользователю();
		СообщениеПользователю.Текст = СтрШаблон("Контрагент с ИНН %1 уже есть в базе, 
												|вы назначены ответственным менеджером", Контрагент_ИНН);
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СтраницаСпецификация

&НаКлиенте
Процедура СоздатьПрисоединенныйФайл(Команда)
	
	ПриЗавершении 	= Новый ОписаниеОповещения("СоздатьПрисоединенныйФайлКомандаЗавершение", ЭтотОбъект);
    ПередПомещением = Новый ОписаниеОповещения("СоздатьПрисоединенныйФайлКомандаПередПомещением", ЭтотОбъект);
    ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    ДиалогВыбораФайлов.Заголовок 			= "Выбор файла для помещения";
	ДиалогВыбораФайлов.МножественныйВыбор 	= Ложь;
    НачатьПомещениеФайла(ПриЗавершении, , ДиалогВыбораФайлов, Истина, , ПередПомещением);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрисоединенныйФайлКомандаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда 
		ВыбранныйФайл = Новый Файл(ВыбранноеИмяФайла);
		Спецификация_СписокПрисоединенныхФайлов.Добавить( Новый Структура("Имя, Расширение, Адрес", ВыбранныйФайл.ИмяБезРасширения, ВыбранныйФайл.Расширение, Адрес), ВыбранныйФайл.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрисоединенныйФайлКомандаПередПомещением(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
	
	Если ПомещаемыйФайл.Размер() > 5*1024*1024 Тогда
        ПоказатьПредупреждение(, "Превышен максимальный размер файла");
        ОтказОтПомещенияФайла = Истина;
    КонецЕсли;
    Файл = ПомещаемыйФайл.Файл.ПолноеИмя;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПрисоединенныйФайл(Команда)
	
	ТекДанные = Элементы.СписокПрисоединенныхФайлов.ТекущиеДанные;	
	Если ТекДанные <> Неопределено Тогда 
		
		ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
   		ДиалогВыбораФайлов.Заголовок 			= "Выбор каталога для сохранения файла";
		ДиалогВыбораФайлов.МножественныйВыбор 	= Ложь;
		
		Контекст = Новый Структура("ДиалогВыбораФайлов, Адрес, Представление", 
				ДиалогВыбораФайлов, ТекДанные.Значение.Адрес, ТекДанные.Представление);
	
		Оповещение = Новый ОписаниеОповещения("СохранитьПрисоединенныйФайлЗавершение", 
				ЭтотОбъект, Контекст);
		ДиалогВыбораФайлов.Показать(Оповещение);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПрисоединенныйФайлЗавершение(ВыбранныеФайлы, Контекст) Экспорт
	
	ДиалогВыбораФайлов = Контекст.ДиалогВыбораФайлов;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Контекст.Адрес);
		ДвоичныеДанные.ЗаписатьАсинх(СтрШаблон("%1\%2", 
				ДиалогВыбораФайлов.Каталог, Контекст.Представление));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ГруппаПодвал 

&НаКлиенте
Процедура Сохранить(Команда)
	 
	СохранитьНаСервере();	
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИВернутьсяВОсновноеМеню(Команда)
	
	Успешно = СохранитьНаСервере();
	Если Успешно Тогда 
		ОсновноеМеню(ЭтаФорма.Команды.Найти("ОсновноеМеню"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьИПерейтиКСозданиюДоговора(Команда)
	
	Успешно = СохранитьНаСервере();
	Если Успешно Тогда
		ПерейтиДоговор(ЭтаФорма.Команды.Найти("ПерейтиДоговор"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИПерейтиКСозданиюДопУслуг(Команда)
	
	Успешно = СохранитьНаСервере();
	Если Успешно Тогда
		ПерейтиДопУслуги(ЭтаФорма.Команды.Найти("ПерейтиДопУслуги"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИПерейтиКСозданиюПеревозки(Команда)
	
	Успешно = СохранитьНаСервере();
	Если Успешно Тогда 
		ПерейтиПеревозка(ЭтаФорма.Команды.Найти("ПерейтиПеревозка"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти


#Область СлужебныеПроцедурыИФункции


#Область ЗаполнениеКонтрагента

&НаКлиенте
Функция ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно)

	Возврат СамообслуживаниеКлиентСервер.ЗаполнениеРеквизитовПоДаннымИННВозможно(
	               ИННЗаполненКорректно,
	               НастройкиПодключенияКСервисуИППЗаданы,
	               Истина,
	               Ложь,
	               Ложь); 

КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента)

	Контрагент_Наименование = РеквизитыКонтрагента.Наименование;
	Контрагент_ИНН			= РеквизитыКонтрагента.ИНН;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") Тогда
		Если РеквизитыКонтрагента.Телефон <> Неопределено Тогда 
			Контрагент_Телефон = РеквизитыКонтрагента.Телефон.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") Тогда		
		Если РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено Тогда
			Контрагент_ЮридическийАдрес = РеквизитыКонтрагента.ЮридическийАдрес.Представление;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция КонтрагентНайденВ_ИБ(ИскомыйИНН)

	НайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", СокрЛП(ИскомыйИНН));
	Если ЗначениеЗаполнено(НайденныйКонтрагент) Тогда 
		ЗаписатьОтветственныеМенеджерыПартнера(НайденныйКонтрагент.Партнер);
		Возврат Истина;
	Иначе 	
		Возврат Ложь;
	КонецЕсли;	
		
КонецФункции

#КонецОбласти


#Область ЗаполнениеКонтактнойИнформации

&НаКлиенте
Процедура Контрагент_НачалоВыбора(Элемент, ВидКонтактнойИнформации, Представление)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	ПараметрыОткрытияФормы.Вставить("Представление",           Представление);
	ПараметрыОткрытияФормы.Вставить("Страна",                  ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	
	ДополнительныеПараметры = ПредставлениеНачалоВыбораЗавершениеДополнительныеПараметры(Элемент);		
	Оповещение = Новый ОписаниеОповещения("ПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытияФормы,, Оповещение);
	
КонецПроцедуры

// Описание
// 
// Возвращаемое значение:
// 	Структура - Описание:
//   * АсинхронныйВызов - Булево -
//   * ОбновитьКонтекстноеМеню - Булево -
//   * Форма - Неопределено -
//   * Результат - Неопределено -
//   * Элемент - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//   * ДанныеСтроки - Неопределено -
//   * ИмяЭлементаРазмещения - Строка -
//   * ЭтоТабличнаяЧасть - Булево -
//   * ДанныеЗаполнения - Строка -
//
&НаКлиенте
Функция ПредставлениеНачалоВыбораЗавершениеДополнительныеПараметры(Элемент)

	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("ДанныеЗаполнения",        ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ЭтоТабличнаяЧасть",       Ложь);
	ДополнительныеПараметры.Вставить("ИмяЭлементаРазмещения",   "ГруппаКонтактнаяИнформацияКонтрагента");
	ДополнительныеПараметры.Вставить("ДанныеСтроки",            Неопределено);
	ДополнительныеПараметры.Вставить("Элемент",                 Элемент);
	ДополнительныеПараметры.Вставить("Результат",               Новый Структура("ИмяРеквизита", "КонтактнаяИнформацияПолеe4db78edx9397x11eax9dcfx708bcd7cdf761"));
	ДополнительныеПараметры.Вставить("Форма",                   ЭтаФорма);
	ДополнительныеПараметры.Вставить("ОбновитьКонтекстноеМеню", Ложь);
	ДополнительныеПараметры.Вставить("АсинхронныйВызов",        Ложь);

	Возврат ДополнительныеПараметры;
		
КонецФункции 

// Открывает подходящую форму контактной информации для редактирования или просмотра.
//
//  Параметры:
//      Параметры    - Произвольный - результат функции ПараметрыФормыКонтактнойИнформации.
//      Владелец     - Произвольный - параметр для открываемой формы.
//      Оповещение   - ОписаниеОповещения - для обработки закрытия формы.
//
//  Возвращаемое значение:
//   ФормаКлиентскогоПриложения - необходимая форма.
//
&НаКлиенте	
Функция ОткрытьФормуКонтактнойИнформации(Параметры, Владелец = Неопределено, Оповещение = Неопределено) Экспорт
	
	Параметры.Вставить("ОткрытаПоСценарию", Истина);
	Возврат ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма", Параметры, Владелец,,,, Оповещение);
	
КонецФункции

// Продолжение вызова ПредставлениеНачалоВыбора 
// 
// Параметры:
// 	РезультатЗакрытия - Структура - 
// 	ДополнительныеПараметры - см. ПредставлениеНачалоВыбораЗавершениеДополнительныеПараметры
// 
&НаКлиенте
Процедура ПредставлениеНачалоВыбораЗавершение(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ОбновитьКонтекстноеМеню") 
			И ДополнительныеПараметры.ОбновитьКонтекстноеМеню Тогда
				Результат = Новый Структура();
				Результат.Вставить("ОбновитьКонтекстноеМеню",  Истина);
				ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, Результат, ДополнительныеПараметры.АсинхронныйВызов);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Результат = РезультатЗакрытия;
	
	ЭтаФорма.Модифицированность = Истина;
	ОбновитьКонтактнуюИнформациюФормы(ЭтаФорма, Результат, ДополнительныеПараметры.АсинхронныйВызов);
	
КонецПроцедуры

// Контекстный вызов
&НаКлиенте
Процедура ОбновитьКонтактнуюИнформациюФормы(Форма, Результат, АсинхронныйВызов)
	
	Форма.Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

#КонецОбласти


#Область Спецификация

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                      |ГДЕ
	                      |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	                      |	И ДоговорыКонтрагентов.Партнер = &Партнер
	                      |	И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком)
	                      |	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)");
	Запрос.УстановитьПараметр("Партнер", Спецификация_Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Спецификация_Договор = Выборка.Ссылка;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокАвтоподбораНаселенногоПункта(Текст)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	СкладыКонтактнаяИнформация.Город КАК Регион
	                      |ИЗ
	                      |	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	                      |ГДЕ
	                      |	СкладыКонтактнаяИнформация.Город <> """"
	                      |	И СкладыКонтактнаяИнформация.Город ПОДОБНО &Город");
	Запрос.УстановитьПараметр("Город", СтрЗаменить("%Замена%", "Замена", Текст));
	Выборка = Запрос.Выполнить().Выбрать();	
	Данные = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл  
		СтруктураЗначения = Новый Структура(
				"Адрес, ЗагруженныеДанные, Идентификатор, Муниципальный, Отказ, ПредлагатьЗагрузкуКлассификатора, Представление",
		        "", Истина, Новый УникальныйИдентификатор, Истина, Ложь, Ложь, Выборка.Регион 
				);
		Данные.Добавить(СтруктураЗначения, Выборка.Регион);			
	КонецЦикла;
	Результат = Новый Структура("Данные, КраткоеПредставлениеОшибки, Отказ, ПодробноеПредставлениеОшибки", Данные, Неопределено, Ложь, Неопределено);
	
	УправлениеКонтактнойИнформациейСлужебный.ФорматированиеРезультатовАвтоподбора(Результат.Данные, Текст);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокПодбораСклады(Текст)
	
	Результат = Новый Структура("Данные, КраткоеПредставлениеОшибки, Отказ, ПодробноеПредставлениеОшибки", 
								Новый СписокЗначений, "", Ложь, "");	
								
	МассивПоиска = Новый Массив;
	МассивПоиска.Добавить("%");
	МассивПоиска.Добавить(СтрШаблон("%1", Текст));
	МассивПоиска.Добавить("%");
	СтрокаПоиска = СтрСоединить(МассивПоиска);							
								
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СкладыКонтактнаяИнформация.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	                      |ГДЕ
	                      |	СкладыКонтактнаяИнформация.Представление ПОДОБНО &НаселенныйПункт");
	Запрос.УстановитьПараметр("НаселенныйПункт", СтрокаПоиска);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Результат.Данные.Добавить(Выборка.Ссылка);			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСумму()

	Спецификация_Сумма = Спецификация_ОбъемТовара * Спецификация_ЦенаТовараСНДС;	
	
	Если Спецификация_СтавкаНДС_Товара = "20%" Тогда 
		Спецификация_СтавкаНДСТовараПеречисление = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
		СтавкаНДС_Число	= 20;
	ИначеЕсли Спецификация_СтавкаНДС_Товара = "10%" Тогда	
		Спецификация_СтавкаНДСТовараПеречисление = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10");
		СтавкаНДС_Число	= 10;
	Иначе 	
		Спецификация_СтавкаНДСТовараПеречисление = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
		СтавкаНДС_Число = 0;	
	КонецЕсли;
	
	Спецификация_СуммаНДС = Спецификация_Сумма / (100 + СтавкаНДС_Число) * СтавкаНДС_Число;
	
КонецПроцедуры

#КонецОбласти


#Область ЗаписьОбъекта

&НаСервере
Функция СохранитьНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда	
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаОрганизации = Справочники.Организации.Выбрать();
	ВыборкаОрганизации.Следующий();
	НайденнаяВалютаRUB = Справочники.Валюты.НайтиПоНаименованию("RUB", Истина);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация"	, ВыборкаОрганизации.Ссылка);
	ПараметрыЗаполнения.Вставить("Валюта"		, НайденнаяВалютаRUB);
	
	ТекСтраница = Элементы.Страницы.ТекущаяСтраница;
	
	Если ТекСтраница = Элементы.СтраницаКонтрагент Тогда 
		Возврат СохранитьСправочник_Партнер_Контрагент(ПараметрыЗаполнения);
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаСпецификация Тогда 
		Возврат СохранитьДокумент_ЗаказПоставщика(ПараметрыЗаполнения);
		
	КонецЕсли;	
		
КонецФункции		

&НаСервере
Функция СохранитьСправочник_Партнер_Контрагент(Параметры)
	
	Успешно = Ложь;
	
	НайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", Контрагент_ИНН);
		
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда 
		ОбъектПартнер = СсылкаНаОбъект.ПолучитьОбъект();
	ИначеЕсли ЗначениеЗаполнено(НайденныйКонтрагент) Тогда 
		СсылкаНаОбъект = НайденныйКонтрагент.Партнер;
		ЗаписатьОтветственныеМенеджерыПартнера(СсылкаНаОбъект);
		Возврат Истина;
	Иначе 	
		ОбъектПартнер = Справочники.Партнеры.СоздатьЭлемент();
	КонецЕсли;
	
	Если Контрагент_ВидКонтрагента = "ИндивидуальныйПредприниматель" Тогда 
		ЮрФизЛицоПартнер 			= Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		ЮрФизЛицоКонтрагента 		= Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
		ЮридическоеФизическоеЛицо 	= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Иначе 
		ЮрФизЛицоПартнер 			= Перечисления.КомпанияЧастноеЛицо.Компания;
		ЮрФизЛицоКонтрагента 		= Перечисления.ЮрФизЛицо.ЮрЛицо;
		ЮридическоеФизическоеЛицо 	= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;	
	
	Если Не ПустаяСтрока(АдресРеквизитыКонтрагента) Тогда 
		РеквизитыКонтрагента = ПолучитьИзВременногоХранилища(АдресРеквизитыКонтрагента);	
	Иначе 
		РеквизитыКонтрагента = Новый Структура;
		РеквизитыКонтрагента.Вставить("Наименование"		, Контрагент_Наименование);
		РеквизитыКонтрагента.Вставить("НаименованиеПолное"	, Контрагент_Наименование);
		РеквизитыКонтрагента.Вставить("ИНН"					, Контрагент_ИНН);
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыКонтрагента) = Тип("Структура") Тогда 
		ЗаполнитьЗначенияСвойств(ОбъектПартнер, РеквизитыКонтрагента);		
	КонецЕсли;
	
	ОбъектПартнер.Поставщик                         = Истина;
	ОбъектПартнер.ЮрФизЛицо							= ЮрФизЛицоПартнер;
	ОбъектПартнер.ДатаРегистрации                   = ТекущаяДатаСеанса();		
	ОбъектПартнер.ОсновнойМенеджер                  = Пользователи.ТекущийПользователь();
	ОбъектПартнер.ВариантОтправкиЭлектронногоЧека 	= Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
	ОбъектПартнер.Комментарий 						= Комментарий;
		
	НачатьТранзакцию();
	
	Попытка
			
		ОбъектПартнер.Записать();
		ЗаписатьОтветственныеМенеджерыПартнера(ОбъектПартнер.Ссылка);
		ЗаписатьКонтрагентаДляПартнера(ОбъектПартнер.Ссылка, РеквизитыКонтрагента, ЮрФизЛицоКонтрагента, ЮридическоеФизическоеЛицо);
		
		ЗафиксироватьТранзакцию();
		
		СсылкаНаОбъект 	= ОбъектПартнер.Ссылка;
		Успешно 		= Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон("Описание ошибки: %1", ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("АРМ_Закупки.Форма.АРМ_Закупки", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Партнеры,, ТекстСообщения);
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
		
	КонецПопытки;
	
	// TODO ВЫНЕСТИ ВЫШЕ В СОХРАНИТЬНАСЕРВЕРЕ
	Если Успешно Тогда 
		Модифицированность 									= Ложь;
		Элементы.Страницы.ТекущаяСтраница.ТолькоПросмотр 	= Истина;
		Элементы.ГруппаИзменитьНастройка.Доступность 		= Истина;
		Элементы.УдалитьИЗакрыть.Доступность				= Ложь;
	КонецЕсли;	
	
	Возврат Успешно;
	
КонецФункции

&НаСервере
Функция СохранитьДокумент_ЗаказПоставщика(Параметры)
	
	Успешно = Ложь;	
		
	НайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("Партнер", Спецификация_Партнер);
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда 
		ЗаказПоставщику = СсылкаНаОбъект.ПолучитьОбъект();
	Иначе 
		ЗаказПоставщику = Документы.ЗаказПоставщику.СоздатьДокумент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗаказПоставщику, Параметры);
		
	ЗаказПоставщику.Контрагент 					= НайденныйКонтрагент;
	ЗаказПоставщику.Партнер 					= Спецификация_Партнер;
	ЗаказПоставщику.Договор 					= Спецификация_Договор;
	ЗаказПоставщику.НомерПоДаннымПоставщика 	= Спецификация_Номер;
	ЗаказПоставщику.ДатаПоДаннымПоставщика 		= Спецификация_ДатаЗаключения;
	ЗаказПоставщику.ДатаОкончанияСпецификации 	= Спецификация_ДатаОкончанияСпецификации;
	ЗаказПоставщику.СпособДоставки 				= Спецификация_БазисПоставкиПеречисление;
	ЗаказПоставщику.ТипПеревозки 				= Спецификация_ТипПеревозки;
	ЗаказПоставщику.Склад 						= Спецификация_СкладГрузополучателя;
	ЗаказПоставщику.Комментарий 				= Объект.Комментарий;
	ЗаказПоставщику.Дата 						= ТекущаяДатаСеанса();
	ЗаказПоставщику.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки;
	ЗаказПоставщику.ЖелаемаяДатаПоступления 	= ТекущаяДатаСеанса();
	ЗаказПоставщику.Менеджер 					= Пользователи.ТекущийПользователь();
	ЗаказПоставщику.Автор 						= Пользователи.ТекущийПользователь();
	ЗаказПоставщику.Подразделение 				= ЗаказПоставщику.Менеджер.Подразделение;
	ЗаказПоставщику.ДатаСогласования 			= ТекущаяДатаСеанса();
	ЗаказПоставщику.НалогообложениеНДС 			= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ЗаказПоставщику.ЦенаВключаетНДС 			= Истина;
	ЗаказПоставщику.ЗакупкаПодДеятельность 		= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ЗаказПоставщику.Согласован 					= Истина;
	ЗаказПоставщику.Статус 						= Перечисления.СтатусыЗаказовПоставщикам.Согласован;
	ЗаказПоставщику.СуммаДокумента				= Спецификация_Сумма;
	ЗаказПоставщику.Приоритет					= Справочники.Приоритеты.НайтиПоНаименованию("Средний", Истина);		
	ЗаказПоставщику.ПорядокРасчетов				= Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	ЗаказПоставщику.ПорядокОплаты               = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	ЗаказПоставщику.ВариантПриемкиТоваров       = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	
	ЗаказПоставщику.Товары.Очистить();
	СтрокаТовары = ЗаказПоставщику.Товары.Добавить();
	СтрокаТовары.Номенклатура 		= Спецификация_ВидПродукции;
	СтрокаТовары.Количество 		= Спецификация_ОбъемТовара;
	СтрокаТовары.КоличествоУпаковок = Спецификация_ОбъемТовара;
	СтрокаТовары.Цена 				= Спецификация_ЦенаТовараСНДС;
	СтрокаТовары.Сумма 				= Спецификация_Сумма;
	СтрокаТовары.СтавкаНДС 			= Спецификация_БазисПоставкиПеречисление;
	СтрокаТовары.СуммаНДС 			= Спецификация_СуммаНДС;	
	СтрокаТовары.СуммаСНДС 			= Спецификация_Сумма;
	СтрокаТовары.Склад				= ЗаказПоставщику.Склад;
	
	ЗаказПоставщику.ЭтапыГрафикаОплаты.Очистить();
	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаЗакупки(
			ЗаказПоставщику,
			Ложь,
			Спецификация_Сумма,
			0);
			
	СтрокаОплаты = ЗаказПоставщику.ЭтапыГрафикаОплаты.Добавить();		
	СтрокаОплаты.ВариантОплаты	= Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления;
	СтрокаОплаты.ДатаПлатежа	= ТекущаяДатаСеанса();
	СтрокаОплаты.ПроцентПлатежа	= 100;
	СтрокаОплаты.СуммаПлатежа	= Спецификация_Сумма;		
	
	НачатьТранзакцию();
	
	Попытка
		ЗаказПоставщику.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		Для Каждого ПрисоединенныйФайл Из Спецификация_СписокПрисоединенныхФайлов Цикл 
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ЗаказПоставщику.Ссылка);
			ПараметрыФайла.Вставить("ИмяБезРасширения", ПрисоединенныйФайл.Представление);
			ПараметрыФайла.Вставить("РасширениеБезТочки", ПрисоединенныйФайл.Значение.Расширение);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			ПараметрыФайла.Вставить("Служебный", Ложь);
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
				ПараметрыФайла, ПрисоединенныйФайл.Значение.Адрес);

		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		СсылкаНаОбъект 	= ЗаказПоставщику.Ссылка;
		Успешно 		= Истина;
		Элементы.СоздатьПрисоединенныйФайл.Доступность = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаказПоставщику.Записать(РежимЗаписиДокумента.Запись);
		
		ТекстСообщения = СтрШаблон("Описание ошибки: %1", ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("АРМ_Закупки.Форма.АРМ_Закупки", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаказПоставщику, ЗаказПоставщику.Ссылка, ТекстСообщения);
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
		
	КонецПопытки;			
	
	// TODO ВЫНЕСТИ ВЫШЕ В СОХРАНИТЬНАСЕРВЕРЕ
	Если Успешно Тогда 
		Модифицированность 									= Ложь;
		Элементы.Страницы.ТекущаяСтраница.ТолькоПросмотр 	= Истина;
		Элементы.ГруппаИзменитьНастройка.Доступность 		= Истина;
		Элементы.УдалитьИЗакрыть.Доступность				= Ложь;
	КонецЕсли;	
		
	Возврат Успешно;
	
КонецФункции

&НаСервере
Процедура УстановитьПометкуУдаления(Ссылка)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПолученныйОбъект = Ссылка.ПолучитьОбъект();
		ПолученныйОбъект.ПометкаУдаления = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПолученныйОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОтветственныеМенеджерыПартнера(ПартнерСсылка)
	
	МенеджерЗаписи = РегистрыСведений.ОтветственныеМенеджерыПартнера.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Партнер	= ПартнерСсылка;
	МенеджерЗаписи.Менеджер	= Пользователи.ТекущийПользователь();
	МенеджерЗаписи.Записать(Истина);
		
КонецПроцедуры
		
&НаСервере
Процедура ЗаписатьКонтрагентаДляПартнера(ПартнерСсылка, РеквизитыКонтрагента, ЮрФизЛицоКонтрагента, ЮридическоеФизическоеЛицо)
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Контрагенты.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Контрагенты КАК Контрагенты
	                      |ГДЕ
	                      |	Контрагенты.Партнер = &Партнер");
	Запрос.УстановитьПараметр("Партнер", ПартнерСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ОбъектКонтрагент = Выборка.Ссылка.ПолучитьОбъект();
	Иначе 	
		ОбъектКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбъектКонтрагент, РеквизитыКонтрагента);
	
	ОбъектКонтрагент.Партнер					= ПартнерСсылка;
	ОбъектКонтрагент.СтранаРегистрации			= Справочники.СтраныМира.Россия;
	ОбъектКонтрагент.ЮрФизЛицо					= ЮрФизЛицоКонтрагента;
	ОбъектКонтрагент.ЮридическоеФизическоеЛицо 	= ЮридическоеФизическоеЛицо;
	
	Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	Вид 			= Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	Представление 	= Контрагент_ЭлектроннаяПочта;
	ЗаписатьКИ(ОбъектКонтрагент, Тип, Вид, Представление);
	
	Тип 			= Перечисления.ТипыКонтактнойИнформации.Телефон;
	Вид 			= Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	Представление 	= Контрагент_Телефон;
	ЗаписатьКИ(ОбъектКонтрагент, Тип, Вид, Представление);
	
	Тип 			= Перечисления.ТипыКонтактнойИнформации.Адрес;
	Вид 			= Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	Представление 	= Контрагент_ПочтовыйАдрес;
	ЗаписатьКИ(ОбъектКонтрагент, Тип, Вид, Представление);
	
	Тип 			= Перечисления.ТипыКонтактнойИнформации.Адрес;
	Вид 			= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	Представление 	= Контрагент_ЮридическийАдрес;
	ЗаписатьКИ(ОбъектКонтрагент, Тип, Вид, Представление);	
	
	ОбъектКонтрагент.Записать();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьКИ(Объект, Тип, Вид, Представление)
	
	ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, Тип);
	ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, Вид, Тип);
	
КонецПроцедуры	

#КонецОбласти


#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура СброситьПометкиКомандШапки(Элементы)
	
	Элементы.ОсновноеМеню.Пометка 				= Ложь;
	Элементы.ПерейтиРеестрКонтрагентов.Пометка 	= Ложь;
	Элементы.ПерейтиКонтрагент.Пометка 			= Ложь;
	Элементы.ПерейтиРеестрДоговоров.Пометка 	= Ложь;
	Элементы.ПерейтиДоговор.Пометка 			= Ложь;
	Элементы.ПерейтиСпецификация.Пометка 		= Ложь;
	Элементы.ПерейтиПеревозка.Пометка			= Ложь;
	Элементы.ПерейтиДопУслуги.Пометка           = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписьТекущейСтраницы()
	
	ЭтаФорма.Заголовок = СтрШаблон("%1", Элементы.Страницы.ТекущаяСтраница.Заголовок);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтраницы()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого Реквизит Из ОбработкаОбъект.Метаданные().Реквизиты Цикл
		Объект[Реквизит.Имя] = Неопределено;		
	КонецЦикла;
		
	СброситьЗначенияРеквизитовФормы(ЭтаФорма);
	
	Для Каждого ПодчиненнаяСтраница Из Элементы.Страницы.ПодчиненныеЭлементы Цикл 
		ПодчиненнаяСтраница.ТолькоПросмотр = Ложь;
	КонецЦикла;
	
	Элементы.Контрагент_ВидКонтрагента.СписокВыбора.Очистить();
	Для Каждого Перечисление Из Метаданные.Перечисления.ЮрФизЛицо.ЗначенияПеречисления Цикл 
		Элементы.Контрагент_ВидКонтрагента.СписокВыбора.Добавить(Перечисление.Имя, Перечисление.Представление());
	КонецЦикла;

	Спецификация_СписокПрисоединенныхФайлов.Очистить();
	
КонецПроцедуры

&НаСервере
Функция РеквизитОтноситсяКТекущейСтранице(Реквизит, ГруппаФормы)
	
	Ответ = Ложь;
	Для Каждого Элемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл 	
		Если Тип(Элемент) = Тип("ГруппаФормы") Тогда 
			Ответ = РеквизитОтноситсяКТекущейСтранице(Реквизит, Элемент);
			
		ИначеЕсли Тип(Элемент) = Тип("ПолеФормы") Тогда  
			Если Элемент.ПутьКДанным = Реквизит Тогда 
				Ответ = Истина;
			Иначе 
				Ответ = Ложь;
			КонецЕсли;
			
		КонецЕсли;	
		
		Если Ответ Тогда 
			Возврат Ответ;
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат Ответ;
	
КонецФункции

&НаСервере
Процедура СброситьЗначенияРеквизитовФормы(ГруппаФормы)
	
	Для Каждого Элемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл 
		Если Тип(Элемент) = Тип("ГруппаФормы") Тогда 
			СброситьЗначенияРеквизитовФормы(Элемент);
			
		ИначеЕсли Тип(Элемент) = Тип("ПолеФормы") Тогда  
			ТекстОператора = СтрШаблон("%1 = Неопределено", Элемент.ПутьКДанным);
			Выполнить(ТекстОператора);
			
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти


#КонецОбласти
