///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, Карло Иван
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
/////////////////////////////////////////////////////////////////////////////////////////////////////// 

// TODO РАССТАВИТЬ ПРИЗНАК МОДИФИКАЦИИ
// TODO НУЖНО РАЗБИТЬ СсылкаНаОбъект на СсылкаНаОбъектСправочник и СсылкаНаОбъектДокумент, для случаев, когда вместе и справочник и документ правим

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Общее
	Элементы.СтраницыПрочее.ОтображениеСтраниц 		= ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыДокументы.ОтображениеСтраниц	= ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыДокументы.Видимость 			= Ложь;
	Элементы.ОсновноеМеню.Пометка 					= Истина;
	Элементы.ГруппаШапкаПрочее.Видимость 			= Ложь;
	Элементы.ПоказатьСообщения.Видимость 			= Ложь;
	Элементы.ГруппаИзменитьНастройка.Доступность 	= Ложь;
	Элементы.УдалитьИЗакрыть.Доступность			= Ложь;
	Элементы.ГруппаСохранить.Видимость 				= Ложь;
	Элементы.ГруппаСохранитьИПерейти.Видимость 		= Ложь;	
	Элементы.ДекорацияИнструкция.Видимость			= Ложь;
	УстановитьНадписьТекущейСтраницы();
	
	// Реестр контрагентов
	РеестрКонтрагентов_ДС_РеестрКонтрагентов.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	// Реестр Договоров
	РеестрДоговоров_ДС_РеестрДоговоров.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	// Контрагент
	НастройкиПодключенияКСервисуИППЗаданы = ПартнерыИКонтрагенты.НастройкиПодключенияКСервисуИППЗаданы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Основная страница
	ПриСменеСтраниц("", Элементы.СтраницаОсновноеМеню);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	масТребуетсяУдалить = Новый Массив;
	масТекущиеСтраницы	= Новый Массив;
	
	Если Элементы.СтраницыДокументы.Видимость Тогда 
		масТекущиеСтраницы.Добавить(Элементы.СтраницыДокументы.ТекущаяСтраница);
	КонецЕсли;
	
	Если Элементы.СтраницыПрочее.Видимость Тогда  
		масТекущиеСтраницы.Добавить(Элементы.СтраницыПрочее.ТекущаяСтраница);
	КонецЕсли;
	
	Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл 
		
		Если Реквизит = "Объект" Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не РеквизитОтноситсяКТекущейСтранице(Реквизит, масТекущиеСтраницы) Тогда 	
			масТребуетсяУдалить.Добавить(Реквизит);	
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемыйРеквизит Из масТребуетсяУдалить Цикл 
		Индекс = ПроверяемыеРеквизиты.Найти(УдаляемыйРеквизит);
		ПроверяемыеРеквизиты.Удалить(Индекс);		
	КонецЦикла;
		
	// Спецификация, Перевозка, не стандартные данные
	Если Элементы.СтраницыДокументы.Видимость Тогда 
		Если Элементы.СтраницыДокументы.ТекущаяСтраница = Элементы.СтраницаСпецификация
			Или Элементы.СтраницыДокументы.ТекущаяСтраница = Элементы.СтраницаПеревозка Тогда
			Если СписокПрисоединенныхФайлов.Количество() = 0 Тогда 
				Отказ = Истина;
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Поле			= Элементы.СписокПрисоединенныхФайлов;
				СообщениеПользователю.ПутьКДанным 	= СписокПрисоединенныхФайлов;
				СообщениеПользователю.Текст 		= "Присоедините хотя бы один файл";
				СообщениеПользователю.Сообщить();	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Отказ = Истина;	
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтраницыПрочееПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПриСменеСтраниц(Элемент, ТекущаяСтраница);

КонецПроцедуры

&НаКлиенте
Процедура СтраницыДокументыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПриСменеСтраниц(Элемент, ТекущаяСтраница);
	
КонецПроцедуры


#Область СтраницаОсновноеМеню

&НаКлиенте
Процедура ОснМеню_ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;	
	
	Если Элемент.ТекущаяОбласть.Текст = "Добавить отгрузку EXW" Тогда 
		Если Не СпецификацияЗакрыта(Расшифровка) Тогда 
			ПерейтиПеревозка(ЭтаФорма.Команды.Найти("ПерейтиПеревозка"));
			Перевозка_СпецификацияНаПродукцию = Расшифровка;
			ЗаполнитьПеревозкуНаОсновеСпецификации();
			Перевозка_ПриИзменении_БазисаПоставки();
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущаяОбласть.Текст = "Добавить поступление CPT" Тогда 			
		ПараметрыЗаполнения = Новый Структура();
		ПараметрыЗаполнения.Вставить("Сделка"			, Расшифровка);
		ПараметрыЗаполнения.Вставить("ОбъемПоступления"	, ОснМеню_ТабличныйДокумент.Область(Элемент.ТекущаяОбласть.Верх, 7, Элемент.ТекущаяОбласть.Низ, 7).Значение );
		ПараметрыЗаполнения.Вставить("ДатаПоступления"	, ОснМеню_ТабличныйДокумент.Область(Элемент.ТекущаяОбласть.Верх, 8, Элемент.ТекущаяОбласть.Низ, 8).Значение );
		ПараметрыЗаполнения.Вставить("Склад"			, ОснМеню_ТабличныйДокумент.Область(Элемент.ТекущаяОбласть.Верх, 9, Элемент.ТекущаяОбласть.Низ, 9).Значение );
			
		СообщениеПользователю = Новый СообщениеПользователю;		
		СообщениеПользователю.Текст = СоздатьПоступлениеИзОсновногоМеню(ПараметрыЗаполнения);
		СообщениеПользователю.Сообщить();
		
	ИначеЕсли Элемент.ТекущаяОбласть.Текст = "Добавить доп. услугу" Тогда
		ПерейтиДопУслуги(ЭтаФорма.Команды.Найти("ПерейтиДоУслуги"));
		
	ИначеЕсли Элемент.ТекущаяОбласть.Текст = "Завершить доставку EXW" Тогда 
		СообщениеПользователю = Новый СообщениеПользователю;		
		СообщениеПользователю.Текст = ЗакрытьПеревозку(Расшифровка);
		СообщениеПользователю.Сообщить();
		
	Иначе 	
		СтандартнаяОбработка = Истина;	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти


#Область СтраницаРеестрКонтрагентов

&НаКлиенте
Процедура РеестрКонтрагентов_ВидКонтрагентаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РеестрКонтрагентов_ДС_РеестрКонтрагентов, "ЮрФизЛицо",  РеестрКонтрагентов_ВидКонтрагента, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(РеестрКонтрагентов_ВидКонтрагента));

КонецПроцедуры

#КонецОбласти


#Область СтраницаРеестрДоговоров

&НаКлиенте
Процедура РеестрДоговоров_ТипДоговораПриИзменении(Элемент)
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РеестрДоговоров_ДС_РеестрДоговоров, "ТипДоговора",  РеестрДоговоров_ТипДоговора, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(РеестрДоговоров_ТипДоговора));	
	
КонецПроцедуры

&НаКлиенте
Процедура РеестрДоговоров_КонтрагентПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РеестрДоговоров_ДС_РеестрДоговоров, "Партнер",  РеестрДоговоров_Контрагент, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(РеестрДоговоров_Контрагент));	

КонецПроцедуры

#КонецОбласти


#Область СтраницаКонтрагент

&НаКлиенте
Процедура Контрагент_ИННПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Контрагент_ВидКонтрагентаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Контрагент_НаименованиеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Контрагент_ЮридическийАдресПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Контрагент_ЭлектроннаяПочтаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Контрагент_ТелефонПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Контрагент_ПочтовыйАдресПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Контрагент_КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Контрагент_ЮридическийАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Контрагент_НачалоВыбора(Элемент, 
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"), 
			Контрагент_ЮридическийАдрес);
		
КонецПроцедуры

&НаКлиенте
Процедура Контрагент_ТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Контрагент_НачалоВыбора(Элемент, 
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента"), 
			Контрагент_Телефон);
				
КонецПроцедуры

&НаКлиенте
Процедура Контрагент_ПочтовыйАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Контрагент_НачалоВыбора(Элемент, 
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента"), 
			Контрагент_ПочтовыйАдрес);
				
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	
	Если Результат.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда 
		Контрагент_ЮридическийАдрес = Результат.Представление;
		
	ИначеЕсли Результат.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
		Контрагент_Телефон = Результат.Представление;
		
	ИначеЕсли Результат.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента Тогда	
	    Контрагент_ПочтовыйАдрес = Результат.Представление;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СтраницаДоговор

&НаКлиенте
Процедура Договор_ПартнерПриИзменении(Элемент)
			
	Модифицированность = Истина;
	Спецификация_Партнер = Договор_Партнер;	
	
КонецПроцедуры

&НаКлиенте
Процедура Договор_ПоставщикПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОтобразитьДопРеквизитыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура Договор_ПеревозчикПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Элементы.Договор_НеПодразумеваетСпецификацию.Видимость = Не Договор_Перевозчик;
	
КонецПроцедуры

&НаКлиенте
Процедура Договор_ДопУслугиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОтобразитьДопРеквизитыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура Договор_ХранениеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОтобразитьДопРеквизитыДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура Договор_НеПодразумеваетСпецификациюПриИзменении(Элемент)
	
	Модифицированность = Истина;	
	ОтобразитьДопРеквизитыДокумента();	
	
КонецПроцедуры

&НаКлиенте
Процедура Договор_НомерПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Договор_ДатаЗаключенияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Договор_ДействуетСПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Договор_ДействуетПоПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Договор_ДоПолногоИсполненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Договор_БессрочныйПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область СтраницаСпецификация

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если ЗначениеЗаполнено(Спецификация_Партнер) Тогда 
		ПартнерПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БазисПоставкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если Спецификация_БазисПоставки = "CPT" Тогда 
		Спецификация_БазисПоставкиПеречисление = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПоставщикаДоНашегоСклада");		
	ИначеЕсли Спецификация_БазисПоставки = "EXW" Тогда 	
		Спецификация_БазисПоставкиПеречисление = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада");
	Иначе 
		Спецификация_БазисПоставкиПеречисление = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ГородАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ТекстДляАвтоПодбора = СокрЛП(Текст);
	Если СтрДлина(ТекстДляАвтоПодбора) < 3 Тогда
		// Нет вариантов, список пуст, стандартную обработку не надо трогать.
		Возврат;
	КонецЕсли;
	
	Результат = СписокАвтоподбораНаселенногоПункта(ТекстДляАвтоПодбора);
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Результат.Данные;
	// Стандартную обработку отключаем, только если есть наши варианты.
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГородОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Спецификация_Город = ВыбранноеЗначение.Представление;

КонецПроцедуры

&НаКлиенте
Процедура СкладГрузополучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Не ПустаяСтрока(Спецификация_Город) Тогда 
		Результат = СписокПодбораСклады(Спецификация_Город);
		Если Результат.Отказ Тогда
			Возврат;
		КонецЕсли;

		ДанныеВыбора = Результат.Данные;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтавкаНДС_ИзНоменклатуры = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "СтавкаНДС");
	Если СтавкаНДС_ИзНоменклатуры = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20") Тогда 
		Спецификация_СтавкаНДС_Товара = "20%";	
	ИначеЕсли СтавкаНДС_ИзНоменклатуры = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10") Тогда 
		Спецификация_СтавкаНДС_Товара = "10%";
	Иначе 	
		Спецификация_СтавкаНДС_Товара = "0%";
	КонецЕсли;
	
	ПересчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъемТовараПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПересчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаТовараСНДСПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ПересчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДС_ТовараПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если Спецификация_СтавкаНДС_Товара = "20%" Тогда 
		Спецификация_СтавкаНДСТовараПеречисление = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");		
	ИначеЕсли Спецификация_СтавкаНДС_Товара = "10%" Тогда 	
		Спецификация_СтавкаНДСТовараПеречисление = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10");
	Иначе 
		Спецификация_СтавкаНДСТовараПеречисление = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	КонецЕсли;	
	
	ПересчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияНомерПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаключенияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияСпецификацииПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Спецификация_КурсДоллараНаМоментОплатыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПеревозкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГородПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладГрузополучателяПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Спецификация_КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область СтраницаПеревозка

&НаКлиенте
Процедура Перевозка_СпецификацияНаПродукциюПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ЗаполнитьПеревозкуНаОсновеСпецификации();		
	Перевозка_ПриИзменении_БазисаПоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_БазисПоставкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Перевозка_ПриИзменении_БазисаПоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ВодительФИОПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Перевозка_ВодительФИОПриИзменении_НаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_СтавкаНДС_0ПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Перевозка_СтавкаНДС_20 = Не Перевозка_СтавкаНДС_0;	
	Пересчитать_ЦенаПеревозкиНаТоннуБезНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_СтавкаНДС_20ПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Перевозка_СтавкаНДС_0 = Не Перевозка_СтавкаНДС_20;
	Пересчитать_ЦенаПеревозкиНаТоннуБезНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ЦенаПеревозкиНаТоннуС_НДСПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Пересчитать_ЦенаПеревозкиНаТоннуБезНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ЗаполнитьПоступлениеНаСкладПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Элементы.Перевозка_ОбъемПоступления.Видимость 					= Перевозка_ЗаполнитьПоступлениеНаСклад;
	Элементы.Перевозка_ПотериНаПеревозке.Видимость 					= Перевозка_ЗаполнитьПоступлениеНаСклад;
	
	Если Перевозка_БазисПоставки = "EXW"
		И Не Перевозка_ЗаполнитьПоступлениеНаСклад Тогда 
		Элементы.ГруппаАдресПоступления.Видимость = Ложь;
		
	Иначе 
		Элементы.ГруппаАдресПоступления.Видимость = Истина;

	КонецЕсли;
	
	Перевозка_ПриИзменении_БазисаПоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресНаправления_ГородОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Перевозка_АдресНаправления_Город = ВыбранноеЗначение.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресНаправления_ГородАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ТекстДляАвтоПодбора = СокрЛП(Текст);
	Если СтрДлина(ТекстДляАвтоПодбора) < 3 Тогда
		// Нет вариантов, список пуст, стандартную обработку не надо трогать.
		Возврат;
	КонецЕсли;
	
	Результат = СписокАвтоподбораНаселенногоПункта(ТекстДляАвтоПодбора);
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Результат.Данные;
	// Стандартную обработку отключаем, только если есть наши варианты.
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресПоступления_ГородОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Перевозка_АдресПоступления_Город = ВыбранноеЗначение.Представление;	
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресПоступления_ГородАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ТекстДляАвтоПодбора = СокрЛП(Текст);
	Если СтрДлина(ТекстДляАвтоПодбора) < 3 Тогда
		// Нет вариантов, список пуст, стандартную обработку не надо трогать.
		Возврат;
	КонецЕсли;
	
	Результат = СписокАвтоподбораНаселенногоПункта(ТекстДляАвтоПодбора);
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Результат.Данные;
	// Стандартную обработку отключаем, только если есть наши варианты.
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресПоступления_Город1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Перевозка_АдресПоступления_Город = ВыбранноеЗначение.Представление;	
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресПоступления_Город1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ТекстДляАвтоПодбора = СокрЛП(Текст);
	Если СтрДлина(ТекстДляАвтоПодбора) < 3 Тогда
		// Нет вариантов, список пуст, стандартную обработку не надо трогать.
		Возврат;
	КонецЕсли;
	
	Результат = СписокАвтоподбораНаселенногоПункта(ТекстДляАвтоПодбора);
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Результат.Данные;
	// Стандартную обработку отключаем, только если есть наши варианты.
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресНаправления_СкладНазначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Не ПустаяСтрока(Перевозка_АдресНаправления_Город) Тогда 
		Результат = СписокПодбораСклады(Перевозка_АдресНаправления_Город);
		Если Результат.Отказ Тогда
			Возврат;
		КонецЕсли;

		ДанныеВыбора = Результат.Данные;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресПоступления_СкладПоступленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Не ПустаяСтрока(Перевозка_АдресПоступления_Город) Тогда 
		Результат = СписокПодбораСклады(Перевозка_АдресПоступления_Город);
		Если Результат.Отказ Тогда
			Возврат;
		КонецЕсли;

		ДанныеВыбора = Результат.Данные;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресПоступления_СкладПоступления1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Не ПустаяСтрока(Перевозка_АдресПоступления_Город) Тогда 
		Результат = СписокПодбораСклады(Перевозка_АдресПоступления_Город);
		Если Результат.Отказ Тогда
			Возврат;
		КонецЕсли;

		ДанныеВыбора = Результат.Данные;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ФактическийОбъемОтгрузкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Пересчитать_Перевозка_ПотериНаПеревозке();
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ОбъемПоступленияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Пересчитать_Перевозка_ПотериНаПеревозке();	
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозка_СтатусДоставкиПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ПоставщикТовараПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_НомерТТН_ЖДНПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ДатаОтгрузкиПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ТранспортноеСредство_ТипТранспортаПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ТранспортноеСредство_НомерТранспортногоСредстваПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ПеревозчикПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ДоговорСПеревозчикомПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ВодительНомерТелефонаПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресНаправления_ГородПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресНаправления_СкладНазначенияПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ЦенаПеревозкиНаТоннуБезНДСПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ПотериНаПеревозкеПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресПоступления_ГородПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресПоступления_СкладПоступленияПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ДатаПоступленияПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ОбъемПоступления1ПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресПоступления_Город1ПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_АдресПоступления_СкладПоступления1ПриИзменении(Элемент)
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Перевозка_ДатаПоступления1ПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область СтраницаДопУслуги

&НаКлиенте
Процедура ДопУслуги_СуммаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Пересчитать_ДопУслуги_СуммаНДС();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДопУслуги_СтавкаНДСПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Пересчитать_ДопУслуги_СуммаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ДопУслуги_ОписаниеУслугиПриИзменении(Элемент)
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ДопУслуги_ПартнерПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопУслуги_ДоговорПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопУслуги_НомерЗаявкиСпецификацииПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопУслуги_ДатаЗаключенияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопУслуги_ДатаИсполненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопУслуги_СуммаНДСПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопУслуги_РаспоряжениеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопУслугиКомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти


#Область ОбработчикиКомандФормы


#Область СтраницаОсновноеМеню

&НаКлиенте
Процедура ОсновноеМеню(Команда)
	
	Если Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередОсновноеМенюЗавершение", ЭтотОбъект);
		ТекстВопроса       = НСтр("ru = 'Данные не сохранены и будут удалены после выхода. Продолжить?'");
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Да"		, НСтр("ru = 'Да'"));
		СписокКнопок.Добавить("Остаться", НСтр("ru = 'Остаться'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		
	Иначе 
		ПередОсновноеМенюЗавершение("Да", "");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередОсновноеМенюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	ОтветНаВопрос = РезультатВопроса;
	
	Если ОтветНаВопрос = "Да" Тогда
		СброситьПометкиКомандШапки(Элементы);
	
		Элементы.ОсновноеМеню.Пометка = Не Элементы.ОсновноеМеню.Пометка;
		Элементы.СтраницыПрочее.ТекущаяСтраница = Элементы.СтраницаОсновноеМеню;
		СтраницыПрочееПриСменеСтраницы("", Элементы.СтраницаОсновноеМеню);
		УстановитьНадписьТекущейСтраницы();
		Модифицированность = Ложь;
	КонецЕсли;

КонецПроцедуры	
	
&НаКлиенте
Процедура ПерейтиРеестрКонтрагентов(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	
	Элементы.ПерейтиРеестрКонтрагентов.Пометка = Истина;
	Элементы.СтраницыПрочее.ТекущаяСтраница = Элементы.СтраницаРеестрКонтрагентов;
	СтраницыПрочееПриСменеСтраницы("", Элементы.СтраницаРеестрКонтрагентов);
	УстановитьНадписьТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКонтрагент(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	
	Элементы.ПерейтиКонтрагент.Пометка = Истина;
	Элементы.СтраницыПрочее.ТекущаяСтраница = Элементы.СтраницаКонтрагент;
	СтраницыПрочееПриСменеСтраницы("", Элементы.СтраницаКонтрагент);
	УстановитьНадписьТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиРеестрДоговоров(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	
	Элементы.ПерейтиРеестрДоговоров.Пометка = Истина;
	Элементы.СтраницыПрочее.ТекущаяСтраница = Элементы.СтраницаРеестрДоговоров;
	СтраницыПрочееПриСменеСтраницы("", Элементы.СтраницаРеестрДоговоров);
	УстановитьНадписьТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиДоговор(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	
	Элементы.ПерейтиДоговор.Пометка = Истина;
	Элементы.СтраницыПрочее.ТекущаяСтраница = Элементы.СтраницаДоговор;
	СтраницыПрочееПриСменеСтраницы("", Элементы.СтраницаДоговор);
	УстановитьНадписьТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиСпецификация(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	
	Элементы.ПерейтиСпецификация.Пометка = Истина;
	Элементы.СтраницыДокументы.ТекущаяСтраница = Элементы.СтраницаСпецификация;
	СтраницыПрочееПриСменеСтраницы("", Элементы.СтраницаСпецификация);
	УстановитьНадписьТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПеревозка(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	
	Элементы.ПерейтиПеревозка.Пометка = Истина;
	Элементы.СтраницыДокументы.ТекущаяСтраница = Элементы.СтраницаПеревозка;
	СтраницыПрочееПриСменеСтраницы("", Элементы.СтраницаПеревозка);
	УстановитьНадписьТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиДопУслуги(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	
	Элементы.ПерейтиДопУслуги.Пометка = Истина;
	Элементы.СтраницыДокументы.ТекущаяСтраница = Элементы.СтраницаДопУслуги;
	СтраницыПрочееПриСменеСтраницы("", Элементы.СтраницаДопУслуги);
	УстановитьНадписьТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура Выйти(Команда)
	
	ЗавершитьРаботуСистемы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьИнструкцию(Команда)

	Элементы.ДекорацияИнструкция.Видимость 		= Не Элементы.ПоказатьСкрытьИнструкцию.Пометка;
	Элементы.ПоказатьСкрытьИнструкцию.Пометка 	= Не Элементы.ПоказатьСкрытьИнструкцию.Пометка;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтчет(Команда)

	ОбновитьОтчет_НаСервере();	
	
КонецПроцедуры

#КонецОбласти


#Область ГруппаОсновнаяКоманднаяПанель

&НаКлиенте
Процедура Изменить(Команда)
	
	Элементы.СтраницыДокументы.ТекущаяСтраница.ТолькоПросмотр 	= Элементы.Изменить.Пометка;
	Элементы.СтраницыПрочее.ТекущаяСтраница.ТолькоПросмотр 		= Элементы.Изменить.Пометка;
	Элементы.УдалитьИЗакрыть.Доступность 						= Не Элементы.Изменить.Пометка;
	Модифицированность 											= Не Элементы.Изменить.Пометка;
	
	Элементы.Изменить.Пометка = Не Элементы.Изменить.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИЗакрыть(Команда)
	
	Если Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередУдалитьИЗакрытьЗавершение", ЭтотОбъект);
		ТекстВопроса       = НСтр("ru = 'Данные не сохранены и будут удалены после выхода. Продолжить?'");
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Да"		, НСтр("ru = 'Да'"));
		СписокКнопок.Добавить("Остаться", НСтр("ru = 'Остаться'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		
	Иначе 
		ПередОсновноеМенюЗавершение("Да", "");
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПередУдалитьИЗакрытьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	ОтветНаВопрос = РезультатВопроса;
	
	Если ОтветНаВопрос = "Да" Тогда
		
		УстановитьПометкуУдаления(СсылкаНаОбъект);
		
		ОсновноеМеню(ЭтаФорма.Команды.Найти("ОсновноеМеню"));
		СброситьПометкиКомандШапки(Элементы);
	
		Элементы.ОсновноеМеню.Пометка = Не Элементы.ОсновноеМеню.Пометка;
		Элементы.СтраницыПрочее.ТекущаяСтраница = Элементы.СтраницаОсновноеМеню;	
		СтраницыПрочееПриСменеСтраницы("", Элементы.СтраницаОсновноеМеню);
		УстановитьНадписьТекущейСтраницы();
		Модифицированность = Ложь;
		
	КонецЕсли;

КонецПроцедуры	

#КонецОбласти


#Область ДляВсехСтраниц

&НаКлиенте
Процедура СоздатьПартнера(Команда)
	
	ПерейтиКонтрагент(ЭтаФорма.Команды.Найти("ПерейтиКонтрагент"));	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговор(Команда)
	
	ПерейтиДоговор(ЭтаФорма.Команды.Найти("ПерейтиДоговор"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСпецификацию(Команда)
	
	ПерейтиСпецификация(ЭтаФорма.Команды.Найти("ПерейтиСпецификация"));	
	
КонецПроцедуры

#КонецОбласти


#Область СтраницаРеестрКонтрагентов

&НаКлиенте
Процедура Контрагент_ДС_РеестрКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "Контрагент_ДС_РеестрКонтрагентовСоздатьДоговорСКонтрагентом" Тогда 
		ПерейтиДоговор(ЭтаФорма.Команды.Найти("ПерейтиДоговор"));		
	КонецЕсли;	
	
КонецПроцедуры  

#КонецОбласти


#Область СтраницаРеестрДоговоров

&НаКлиенте
Процедура РеестрДоговоров_ДС_РеестрДоговоровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "РеестрДоговоров_ДС_РеестрДоговоровСоздатьСпецификацию" Тогда 
		ПерейтиСпецификация(ЭтаФорма.Команды.Найти("ПерейтиСпецификация"));		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СтраницаКонтрагент

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	ИННЗаполненКорректно = Истина;
	
	ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");

	Если СтрДлина(СокрЛП(Контрагент_ИНН)) = 12 Тогда 	
		Контрагент_ВидКонтрагента = "ИндивидуальныйПредприниматель";
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель");
		
	ИначеЕсли СтрДлина(СокрЛП(Контрагент_ИНН)) = 10 Тогда	
		Контрагент_ВидКонтрагента = "ЮрЛицо";

	КонецЕсли;
	
	ТекстСообщения = "";
	Если ПустаяСтрока(Контрагент_ИНН) Тогда
		ИННЗаполненКорректно = Ложь;
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Контрагент_ИНН, 
		                                                                          ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо),
		                                                                          ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Контрагент_ИНН",,);
			
	КонецЕсли;
	
	Если ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно) Тогда
		РеквизитыКонтрагента = ПартнерыИКонтрагентыВызовСервера.ДанныеКонтрагентаПоИНН(
		                       ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(ЮрФизЛицо),
		                       СокрЛП(Контрагент_ИНН),
		                       УникальныйИдентификатор);
							   
		АдресРеквизитыКонтрагента = ПоместитьВоВременноеХранилище(РеквизитыКонтрагента, УникальныйИдентификатор);
		ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента);
	КонецЕсли;	
	
	Если КонтрагентНайденВ_ИБ(Контрагент_ИНН) Тогда 
		СообщениеПользователю = Новый СообщениеПользователю();
		СообщениеПользователю.Текст = СтрШаблон("Контрагент с ИНН %1 уже есть в базе, 
												|вы назначены ответственным менеджером", Контрагент_ИНН);
		СообщениеПользователю.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ГруппаПрисоединенныеФайлы

&НаКлиенте
Процедура СоздатьПрисоединенныйФайл(Команда)
	
	Модифицированность = Истина;
	ПриЗавершении 	= Новый ОписаниеОповещения("СоздатьПрисоединенныйФайлКомандаЗавершение", ЭтотОбъект);
    ПередПомещением = Новый ОписаниеОповещения("СоздатьПрисоединенныйФайлКомандаПередПомещением", ЭтотОбъект);
    ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    ДиалогВыбораФайлов.Заголовок 			= "Выбор файла для помещения";
	ДиалогВыбораФайлов.МножественныйВыбор 	= Ложь;
    НачатьПомещениеФайла(ПриЗавершении, , ДиалогВыбораФайлов, Истина, , ПередПомещением);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрисоединенныйФайлКомандаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда 
		ВыбранныйФайл = Новый Файл(ВыбранноеИмяФайла);
		СписокПрисоединенныхФайлов.Добавить( Новый Структура("Имя, Расширение, Адрес", ВыбранныйФайл.ИмяБезРасширения, ВыбранныйФайл.Расширение, Адрес), ВыбранныйФайл.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрисоединенныйФайлКомандаПередПомещением(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
	
	Если ПомещаемыйФайл.Размер() > 5*1024*1024 Тогда
        ПоказатьПредупреждение(, "Превышен максимальный размер файла");
        ОтказОтПомещенияФайла = Истина;
    КонецЕсли;
    Файл = ПомещаемыйФайл.Файл.ПолноеИмя;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПрисоединенныйФайл(Команда)
	
	ТекДанные = Элементы.СписокПрисоединенныхФайлов.ТекущиеДанные;	
	Если ТекДанные <> Неопределено Тогда 
		
		ДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
   		ДиалогВыбораФайлов.Заголовок 			= "Выбор каталога для сохранения файла";
		ДиалогВыбораФайлов.МножественныйВыбор 	= Ложь;
		
		Контекст = Новый Структура("ДиалогВыбораФайлов, Адрес, Представление", 
				ДиалогВыбораФайлов, ТекДанные.Значение.Адрес, ТекДанные.Представление);
	
		Оповещение = Новый ОписаниеОповещения("СохранитьПрисоединенныйФайлЗавершение", 
				ЭтотОбъект, Контекст);
		ДиалогВыбораФайлов.Показать(Оповещение);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПрисоединенныйФайлЗавершение(ВыбранныеФайлы, Контекст) Экспорт
	
	ДиалогВыбораФайлов = Контекст.ДиалогВыбораФайлов;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Контекст.Адрес);
		ДвоичныеДанные.ЗаписатьАсинх(СтрШаблон("%1\%2", 
				ДиалогВыбораФайлов.Каталог, Контекст.Представление));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ГруппаПодвал 

&НаКлиенте
Процедура Сохранить(Команда)
	 
	СохранитьНаСервере();	
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИВернутьсяВОсновноеМеню(Команда)
	
	Успешно = СохранитьНаСервере();
	Если Успешно Тогда 
		ОсновноеМеню(ЭтаФорма.Команды.Найти("ОсновноеМеню"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьИПерейтиКСозданиюДоговора(Команда)
	
	Успешно = СохранитьНаСервере();
	Если Успешно Тогда
		ПерейтиДоговор(ЭтаФорма.Команды.Найти("ПерейтиДоговор"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИПерейтиКСозданиюДопУслуг(Команда)
	
	Успешно = СохранитьНаСервере();
	Если Успешно Тогда
		ПерейтиДопУслуги(ЭтаФорма.Команды.Найти("ПерейтиДопУслуги"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИПерейтиКСозданиюПеревозки(Команда)
	
	Успешно = СохранитьНаСервере();
	Если Успешно Тогда 
		ПерейтиПеревозка(ЭтаФорма.Команды.Найти("ПерейтиПеревозка"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИПерейтиКСозданиюСпецификации(Команда)
	
	Успешно = СохранитьНаСервере();
	Если Успешно Тогда 
		ПерейтиСпецификация(ЭтаФорма.Команды.Найти("ПерейтиСпецификация"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти


#Область СлужебныеПроцедурыИФункции


#Область ЗаполнениеКонтрагента

&НаКлиенте
Функция ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно)

	Возврат СамообслуживаниеКлиентСервер.ЗаполнениеРеквизитовПоДаннымИННВозможно(
	               ИННЗаполненКорректно,
	               НастройкиПодключенияКСервисуИППЗаданы,
	               Истина,
	               Ложь,
	               Ложь); 

КонецФункции

&НаКлиенте
Процедура ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента)

	Контрагент_Наименование = РеквизитыКонтрагента.Наименование;
	Контрагент_ИНН			= РеквизитыКонтрагента.ИНН;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") Тогда
		Если РеквизитыКонтрагента.Телефон <> Неопределено Тогда 
			Контрагент_Телефон = РеквизитыКонтрагента.Телефон.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") Тогда		
		Если РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено Тогда
			Контрагент_ЮридическийАдрес = РеквизитыКонтрагента.ЮридическийАдрес.Представление;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция КонтрагентНайденВ_ИБ(ИскомыйИНН)

	НайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", СокрЛП(ИскомыйИНН));
	Если ЗначениеЗаполнено(НайденныйКонтрагент) Тогда 
		ЗаписатьОтветственныеМенеджерыПартнера(НайденныйКонтрагент.Партнер);
		Возврат Истина;
	Иначе 	
		Возврат Ложь;
	КонецЕсли;	
		
КонецФункции

#КонецОбласти


#Область ЗаполнениеКонтактнойИнформации

&НаКлиенте
Процедура Контрагент_НачалоВыбора(Элемент, ВидКонтактнойИнформации, Представление)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	ПараметрыОткрытияФормы.Вставить("Представление",           Представление);
	ПараметрыОткрытияФормы.Вставить("Страна",                  ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	
	ДополнительныеПараметры = ПредставлениеНачалоВыбораЗавершениеДополнительныеПараметры(Элемент);		
	Оповещение = Новый ОписаниеОповещения("ПредставлениеНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытияФормы,, Оповещение);
	
КонецПроцедуры

// Описание
// 
// Возвращаемое значение:
// 	Структура - Описание:
//   * АсинхронныйВызов - Булево -
//   * ОбновитьКонтекстноеМеню - Булево -
//   * Форма - Неопределено -
//   * Результат - Неопределено -
//   * Элемент - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы -
//   * ДанныеСтроки - Неопределено -
//   * ИмяЭлементаРазмещения - Строка -
//   * ЭтоТабличнаяЧасть - Булево -
//   * ДанныеЗаполнения - Строка -
//
&НаКлиенте
Функция ПредставлениеНачалоВыбораЗавершениеДополнительныеПараметры(Элемент)

	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("ДанныеЗаполнения",        ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ЭтоТабличнаяЧасть",       Ложь);
	ДополнительныеПараметры.Вставить("ИмяЭлементаРазмещения",   "ГруппаКонтактнаяИнформацияКонтрагента");
	ДополнительныеПараметры.Вставить("ДанныеСтроки",            Неопределено);
	ДополнительныеПараметры.Вставить("Элемент",                 Элемент);
	ДополнительныеПараметры.Вставить("Результат",               Новый Структура("ИмяРеквизита", "КонтактнаяИнформацияПолеe4db78edx9397x11eax9dcfx708bcd7cdf761"));
	ДополнительныеПараметры.Вставить("Форма",                   ЭтаФорма);
	ДополнительныеПараметры.Вставить("ОбновитьКонтекстноеМеню", Ложь);
	ДополнительныеПараметры.Вставить("АсинхронныйВызов",        Ложь);

	Возврат ДополнительныеПараметры;
		
КонецФункции 

// Открывает подходящую форму контактной информации для редактирования или просмотра.
//
//  Параметры:
//      Параметры    - Произвольный - результат функции ПараметрыФормыКонтактнойИнформации.
//      Владелец     - Произвольный - параметр для открываемой формы.
//      Оповещение   - ОписаниеОповещения - для обработки закрытия формы.
//
//  Возвращаемое значение:
//   ФормаКлиентскогоПриложения - необходимая форма.
//
&НаКлиенте	
Функция ОткрытьФормуКонтактнойИнформации(Параметры, Владелец = Неопределено, Оповещение = Неопределено) Экспорт
	
	Параметры.Вставить("ОткрытаПоСценарию", Истина);
	Возврат ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма", Параметры, Владелец,,,, Оповещение);
	
КонецФункции

// Продолжение вызова ПредставлениеНачалоВыбора 
// 
// Параметры:
// 	РезультатЗакрытия - Структура - 
// 	ДополнительныеПараметры - см. ПредставлениеНачалоВыбораЗавершениеДополнительныеПараметры
// 
&НаКлиенте
Процедура ПредставлениеНачалоВыбораЗавершение(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ОбновитьКонтекстноеМеню") 
			И ДополнительныеПараметры.ОбновитьКонтекстноеМеню Тогда
				Результат = Новый Структура();
				Результат.Вставить("ОбновитьКонтекстноеМеню",  Истина);
				ОбновитьКонтактнуюИнформациюФормы(ДополнительныеПараметры.Форма, Результат, ДополнительныеПараметры.АсинхронныйВызов);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Результат = РезультатЗакрытия;
	
	ЭтаФорма.Модифицированность = Истина;
	ОбновитьКонтактнуюИнформациюФормы(ЭтаФорма, Результат, ДополнительныеПараметры.АсинхронныйВызов);
	
КонецПроцедуры

// Контекстный вызов
&НаКлиенте
Процедура ОбновитьКонтактнуюИнформациюФормы(Форма, Результат, АсинхронныйВызов)
	
	Форма.Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

#КонецОбласти


#Область СтраницаОсновноеМеню

&НаСервере
Процедура ОбновитьОтчет_НаСервере()

	ОснМеню_ТабличныйДокумент.Очистить();
	
	Макет = Обработки.АРМ_Закупки.ПолучитьМакет("Макет");	
	
	ВыгрузкаСделка = ЗапросСделка_Выгрузить();
	ВыгрузкаПеревозка = ЗапросПеревозка_Выгрузить(ВыгрузкаСделка.ВыгрузитьКолонку("Ссылка"));
	ВыгрузкаДопУслуги = ЗапросДопУслуги_Выгрузить(ВыгрузкаСделка.ВыгрузитьКолонку("Ссылка"));
	
	// Сделки
	ОблСделка_Шапка	= Макет.ПолучитьОбласть("Сделка_Шапка");
	ОснМеню_ТабличныйДокумент.Вывести(ОблСделка_Шапка);
	
	ОснМеню_ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
	
	Для Каждого СтрокаСделка Из ВыгрузкаСделка Цикл  
		
		ОблСделка_Строка = Макет.ПолучитьОбласть("Сделка_Строка");
		ЗаполнитьЗначенияСвойств(ОблСделка_Строка.Параметры, СтрокаСделка);	
		ОблСделка_Строка.Параметры.Сделка_Ссылка = СтрокаСделка.Ссылка;
		ОбластьОформления = ОснМеню_ТабличныйДокумент.Вывести(ОблСделка_Строка, 1, "Сделка", Ложь);	
		РаскраситьСтроку("Сделка_Статус", ОбластьОформления, СтрокаСделка);
		
		// Перевозки по сделке
		ОблПеревозка_Разделитель = Макет.ПолучитьОбласть("Перевозка_Разделитель");
		ОснМеню_ТабличныйДокумент.Вывести(ОблПеревозка_Разделитель, 2, "Перевозка", Ложь);
		
		ОблПеревозка_Шапка = Макет.ПолучитьОбласть("Перевозка_Шапка");
		ОснМеню_ТабличныйДокумент.Вывести(ОблПеревозка_Шапка, 2, "Перевозка", Ложь);
		
		СтрокиПеревозки = ВыгрузкаПеревозка.НайтиСтроки(Новый Структура("Распоряжение", СтрокаСделка.Ссылка));
		Если СтрокиПеревозки.Количество() > 0 Тогда
			Для Каждого СтрокаПеревозки Из СтрокиПеревозки Цикл 
				Если СтрокаПеревозки.Перевозка_Статус <> Перечисления.СтатусыЗаданийНаПеревозку.Закрыто Тогда 
					ОблПеревозка_Строка = Макет.ПолучитьОбласть("Перевозка_Строка_Закрыт");	
					ОблПеревозка_Строка.Параметры.ЗавершитьДоставкуEXW 		= "Завершить доставку EXW";
					ОблПеревозка_Строка.Параметры.расшЗавершитьДоставкуEXW 	= СтрокаПеревозки.Ссылка;
				ИначеЕсли СтрокаПеревозки.Перевозка_ОбъемПоступления = 0 Тогда 
					ОблПеревозка_Строка = Макет.ПолучитьОбласть("Перевозка_Строка_Поступление");
					ОблПеревозка_Строка.Параметры.ДобавитьПоступлениеCPT 		= "Добавить поступление CPT";
					ОблПеревозка_Строка.Параметры.расшДобавитьПоступлениеCPT 	= СтрокаСделка.Ссылка;
				Иначе 
					ОблПеревозка_Строка = Макет.ПолучитьОбласть("Перевозка_Строка");	
				КонецЕсли;	
					
				ЗаполнитьЗначенияСвойств(ОблПеревозка_Строка.Параметры, СтрокаПеревозки);
				ОблПеревозка_Строка.Параметры.Перевозка_Ссылка = СтрокаПеревозки.Ссылка;
				ОснМеню_ТабличныйДокумент.Вывести(ОблПеревозка_Строка, 2, "Перевозка", Ложь);
			КонецЦикла;
		КонецЕсли;
		
		ОблПеревозка_Команды = Макет.ПолучитьОбласть("Перевозка_Команды");
		ОблПеревозка_Команды.Параметры.ДобавитьОтгрузкуEXW 			= "Добавить отгрузку EXW";
		ОблПеревозка_Команды.Параметры.расшДобавитьОтгрузкуEXW  	= СтрокаСделка.Ссылка;
		ОснМеню_ТабличныйДокумент.Вывести(ОблПеревозка_Команды, 2, "Перевозка", Ложь);		
		
		// Доп. услуги по сделке
		ОблДопУслуги_Разделитель = Макет.ПолучитьОбласть("ДопУслуги_Разделитель");
		ОснМеню_ТабличныйДокумент.Вывести(ОблДопУслуги_Разделитель, 2, "Доп услуги", Ложь);
		
		ОблДопУслуги_Шапка = Макет.ПолучитьОбласть("ДопУслуги_Шапка");
		ОснМеню_ТабличныйДокумент.Вывести(ОблДопУслуги_Шапка, 2, "Доп услуги", Ложь);
						
		СтрокиДопУслуги = ВыгрузкаДопУслуги.НайтиСтроки(Новый Структура("Распоряжение", СтрокаСделка.Ссылка));
		Если СтрокиДопУслуги.Количество() > 0 Тогда
			Для Каждого СтрокаДопУслуги Из СтрокиДопУслуги Цикл 
				ОблДопУслуги_Строка = Макет.ПолучитьОбласть("ДопУслуги_Строка");
			    ЗаполнитьЗначенияСвойств(ОблДопУслуги_Строка.Параметры, СтрокаДопУслуги);
				ОблДопУслуги_Строка.Параметры.ДопУслуги_Ссылка = СтрокаДопУслуги.Ссылка;
				ОснМеню_ТабличныйДокумент.Вывести(ОблДопУслуги_Строка, 2, "Доп услуги", Ложь);
			КонецЦикла;	
		КонецЕсли;
		
		ОблДопУслуги_Команды = Макет.ПолучитьОбласть("ДопУслуги_Команды");
		ОблДопУслуги_Команды.Параметры.ДобавитьДопУслугу 		= "Добавить доп. услугу";
		ОблДопУслуги_Команды.Параметры.расшДобавитьДопУслугу 	= СтрокаСделка.Ссылка;
		ОснМеню_ТабличныйДокумент.Вывести(ОблДопУслуги_Команды, 2, "Доп услуги", Ложь);
		
	КонецЦикла;
	
	ОснМеню_ТабличныйДокумент.ЗакончитьАвтоГруппировкуСтрок();
	
КонецПроцедуры

&НаСервере
Функция ЗапросСделка_Выгрузить()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Партнер КАК Сделка_Поставщик,
	               |	ЗаказПоставщикуТовары.Номенклатура КАК Сделка_ВидПродукции,
	               |	ВЫБОР
	               |		КОГДА ЗаказПоставщикуТовары.Ссылка.Номер <> """"
	               |			ТОГДА ЗаказПоставщикуТовары.Ссылка.Номер
	               |		ИНАЧЕ ДоговорыКонтрагентов.Номер
	               |	КОНЕЦ КАК Сделка_Номер,
	               |	ЗаказПоставщикуТовары.Количество КАК Сделка_Объем,
	               |	взСуммаОтгрузокEXW.Вес + взСуммаПоступленийCPT.Количество КАК Сделка_ВывезенныйОбъем,
	               |	взСуммаПоступленийВсех.Количество КАК Сделка_ПоступившийОбъем,
	               |	ВЫБОР
	               |		КОГДА ЗаказПоставщикуТовары.Ссылка.ДатаОкончанияСпецификации <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ЗаказПоставщикуТовары.Ссылка.ДатаОкончанияСпецификации
	               |		ИНАЧЕ ДоговорыКонтрагентов.ДатаОкончанияДействия
	               |	КОНЕЦ КАК Сделка_ДатаОкончания,
	               |	ВЫБОР
	               |		КОГДА ЗаказПоставщикуТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	               |			ТОГДА ""Да""
	               |		ИНАЧЕ ""Нет""
	               |	КОНЕЦ КАК Сделка_Завершена,
	               |	ВЫБОР
	               |		КОГДА &ТекущаяДата МЕЖДУ ДОБАВИТЬКДАТЕ(ЗаказПоставщикуТовары.Ссылка.ДатаОкончанияСпецификации, ДЕНЬ, -7) И КОНЕЦПЕРИОДА(ЗаказПоставщикуТовары.Ссылка.ДатаОкончанияСпецификации, ДЕНЬ)
	               |			ТОГДА ""Действует""
	               |		КОГДА ЗаказПоставщикуТовары.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	               |				И ЗаказПоставщикуТовары.Ссылка.ДатаОкончанияСпецификации < &ТекущаяДата
	               |			ТОГДА ""Просрочена""
	               |		КОГДА ЗаказПоставщикуТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	               |			ТОГДА ""Завершена""
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК Сделка_Статус,
	               |	ЗаказПоставщикуТовары.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				ЗаданиеНаПеревозкуРаспоряжения.Распоряжение КАК Распоряжение,
	               |				СУММА(ЗаданиеНаПеревозкуРаспоряжения.Вес) КАК Вес
	               |			ИЗ
	               |				Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	               |			ГДЕ
	               |				ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Проведен
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				ЗаданиеНаПеревозкуРаспоряжения.Распоряжение) КАК взСуммаОтгрузокEXW
	               |			ПО ЗаказПоставщикуТовары.Ссылка = взСуммаОтгрузокEXW.Распоряжение
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				ПоступлениеТоваровНаСкладТовары.Ссылка.Распоряжение КАК Распоряжение,
	               |				СУММА(ПоступлениеТоваровНаСкладТовары.Количество) КАК Количество
	               |			ИЗ
	               |				Документ.ПоступлениеТоваровНаСклад.Товары КАК ПоступлениеТоваровНаСкладТовары
	               |			ГДЕ
	               |				ПоступлениеТоваровНаСкладТовары.Ссылка.Проведен
	               |				И ПоступлениеТоваровНаСкладТовары.ДоставкаПоставщика
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				ПоступлениеТоваровНаСкладТовары.Ссылка.Распоряжение) КАК взСуммаПоступленийCPT
	               |			ПО ЗаказПоставщикуТовары.Ссылка = взСуммаПоступленийCPT.Распоряжение
	               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |				ПоступлениеТоваровНаСкладТовары.Ссылка.Распоряжение КАК Распоряжение,
	               |				СУММА(ПоступлениеТоваровНаСкладТовары.Количество) КАК Количество
	               |			ИЗ
	               |				Документ.ПоступлениеТоваровНаСклад.Товары КАК ПоступлениеТоваровНаСкладТовары
	               |			ГДЕ
	               |				ПоступлениеТоваровНаСкладТовары.Ссылка.Проведен
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				ПоступлениеТоваровНаСкладТовары.Ссылка.Распоряжение) КАК взСуммаПоступленийВсех
	               |			ПО ЗаказПоставщикуТовары.Ссылка = взСуммаПоступленийВсех.Распоряжение
	               |		ПО ДоговорыКонтрагентов.Ссылка = ЗаказПоставщикуТовары.Ссылка.Договор
	               |ГДЕ
	               |	ИСТИНА
				   |	//СкрытьЗавершенныеСделки
				   |	//ОтборПоставщикПродукции
				   |	//ОтборВидПродукции";
				 
	Если ОснМеню_СкрытьЗавершенныеСделки Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СкрытьЗавершенныеСделки", "И ЗаказПоставщикуТовары.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснМеню_ОтборПоставщикПродукции) Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОтборПоставщикПродукции", 
					   "		И ВЫБОР
		               |			КОГДА ЗаказПоставщикуТовары.Ссылка.Номер <> """"
		               |				ТОГДА ЗаказПоставщикуТовары.Ссылка.Партнер = &Партнер
		               |			ИНАЧЕ ДоговорыКонтрагентов.Партнер = &Партнер
		               |		КОНЕЦ");
		Запрос.УстановитьПараметр("Партнер", ОснМеню_ОтборПоставщикПродукции);	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОснМеню_ОтборВидПродукции) Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОтборВидПродукции", "И ЗаказПоставщикуТовары.Номенклатура = &Номенклатура");
		Запрос.УстановитьПараметр("Номенклатура", ОснМеню_ОтборВидПродукции);
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();		
	
КонецФункции

&НаСервере
Функция ЗапросПеревозка_Выгрузить(МассивСделки)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Распоряжение", МассивСделки);
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.ДатаТТН_ЖДН КАК Перевозка_ДатаОтгрузки,
	               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.НомерТТН_ЖДН КАК Перевозка_НомерТТН,
	               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.ТранспортноеСредство.Код КАК Перевозка_НомерТС,
	               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Вес КАК Перевозка_ОбъемОтгрузки,
	               |	ЕСТЬNULL(взПоступения.Количество, 0) КАК Перевозка_ОбъемПоступления,
	               |	взПоступения.Дата КАК Перевозка_ДатаПоступления,
	               |	ЗаданиеНаПеревозкуРаспоряжения.Склад КАК Перевозка_Склад,
	               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Статус КАК Перевозка_Статус,
	               |	ЗаданиеНаПеревозкуРаспоряжения.Ссылка КАК Ссылка,
	               |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение КАК Распоряжение
	               |ИЗ
	               |	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ПоступлениеТоваровНаСкладТовары.Ссылка.Распоряжение КАК Распоряжение,
	               |			СУММА(ПоступлениеТоваровНаСкладТовары.Количество) КАК Количество,
	               |			ПоступлениеТоваровНаСкладТовары.Ссылка.Дата КАК Дата
	               |		ИЗ
	               |			Документ.ПоступлениеТоваровНаСклад.Товары КАК ПоступлениеТоваровНаСкладТовары
	               |		ГДЕ
	               |			ПоступлениеТоваровНаСкладТовары.Ссылка.Проведен
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ПоступлениеТоваровНаСкладТовары.Ссылка.Распоряжение,
	               |			ПоступлениеТоваровНаСкладТовары.Ссылка.Дата) КАК взПоступения
	               |		ПО ЗаданиеНаПеревозкуРаспоряжения.Распоряжение = взПоступения.Распоряжение
	               |ГДЕ
	               |	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение ССЫЛКА Документ.ЗаказПоставщику
	               |	И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение В(&Распоряжение)";
	
	Если ОснМеню_СкрытьЗавершенныеСделки Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СкрытьЗавершенныеСделки", "И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)");
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ЗапросДопУслуги_Выгрузить(МассивСделки)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Распоряжение", МассивСделки);
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗаявкаНаУслуги.Партнер КАК ДопУслуги_Поставщик,
	               |	ЗаявкаНаУслуги.ОписаниеУслуги КАК ДопУслуги_Описание,
	               |	ЗаявкаНаУслуги.Номер КАК ДопУслуги_Номер,
	               |	ЗаявкаНаУслуги.Дата КАК ДопУслуги_Дата,
	               |	ЗаявкаНаУслуги.ДатаИсполнения КАК ДопУслуги_КрайнийСрок,
	               |	ВЫБОР
	               |		КОГДА ЗаявкаНаУслуги.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаУслуги.Завершено)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДопУслуги_Оказана,
	               |	ЗаявкаНаУслуги.Статус КАК ДопУслуги_Статус,
	               |	ЗаявкаНаУслуги.Распоряжение КАК Распоряжение,
	               |	ЗаявкаНаУслуги.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ЗаявкаНаУслуги КАК ЗаявкаНаУслуги
	               |ГДЕ
	               |	ЗаявкаНаУслуги.Распоряжение В(&Распоряжение)";
	
	Если ОснМеню_СкрытьЗавершенныеСделки Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СкрытьЗавершенныеСделки", "И ЗаявкаНаУслуги.Распоряжение.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснМеню_ОтборПоставщикПродукции) Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОтборПоставщикПродукции", "И ЗаявкаНаУслуги.ДопУслуги_Поставщик = &Партнер");
		Запрос.УстановитьПараметр("Партнер", ОснМеню_ОтборПоставщикПродукции);	
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

&НаСервере
Процедура РаскраситьСтроку(ИмяПравила, ОбластьОформления, СтрокаСДанными)

	// Область "Сделка_Строка"
	Если ИмяПравила = "Сделка_Статус" Тогда 
		
		// Параметр "Сделка_Статус"
		Ячейка = ОснМеню_ТабличныйДокумент.Область(ОбластьОформления.Верх, 10, ОбластьОформления.Низ, 10);
		Если СтрокаСДанными.Сделка_Статус = "Действует" Тогда 
			ЦветФона = WebЦвета.Желтый;
			
		ИначеЕсли СтрокаСДанными.Сделка_Статус = "Просрочена" Тогда
			ЦветФона = WebЦвета.Красный;	
			
		ИначеЕсли СтрокаСДанными.Сделка_Статус = "Завершена" Тогда
			ЦветФона = WebЦвета.Зеленый;		

		Иначе 
			ЦветФона = WebЦвета.Белый;
			
		КонецЕсли;
		Ячейка.ЦветФона = ЦветФона;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СпецификацияЗакрыта(ДокументСсылка)
	
	Возврат ДокументСсылка.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;	
	
КонецФункции

&НаСервере
Функция ЗакрытьПеревозку(ДокументСсылка)

	ТекстСообщения = "Не удалось закрыть документ";
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда 
		ОбъектДокумент = ДокументСсылка.ПолучитьОбъект();
		ОбъектДокумент.Статус = Перечисления.СтатусыЗаданийНаПеревозку.Закрыто;
		Попытка
			ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			ТекстСообщения = СтрШаблон("Документ %1 был закрыт", ДокументСсылка);
		Исключение
			ОбъектДокумент.Записать(РежимЗаписиДокумента.Запись);
			ТекстСообщения = СтрШаблон("Документ %1 был закрыт с ошибками: %2", ДокументСсылка, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации("Задание на перевозку. Ошибка установки статуса ", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаданиеНаПеревозку, ДокументСсылка, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

&НаСервере
Функция СоздатьПоступлениеИзОсновногоМеню(ПараметрыЗаполнения)
	
	ВыборкаОрганизации = Справочники.Организации.Выбрать();
	ВыборкаОрганизации.Следующий();
	НайденнаяВалютаRUB = Справочники.Валюты.НайтиПоНаименованию("RUB", Истина);
	
	ОбъектЗаписи = Документы.ПоступлениеТоваровНаСклад.СоздатьДокумент();
	
	ОбъектЗаписи.Организация			= ВыборкаОрганизации.Ссылка;
	ОбъектЗаписи.Валюта					= НайденнаяВалютаRUB;
	ОбъектЗаписи.Дата 					= ТекущаяДатаСеанса();
	ОбъектЗаписи.Партнер 				= ПараметрыЗаполнения.Сделка.Партнер;
	ОбъектЗаписи.Контрагент 			= ПараметрыЗаполнения.Сделка.Контрагент;
	ОбъектЗаписи.ХозяйственнаяОперация 	= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка;
	ОбъектЗаписи.Договор 				= ПараметрыЗаполнения.Сделка.Договор;
	ОбъектЗаписи.Менеджер 				= Пользователи.ТекущийПользователь();
	ОбъектЗаписи.НалогообложениеНДС 	= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ОбъектЗаписи.ВидДеятельностиНДС 	= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ОбъектЗаписи.ЦенаВключаетНДС 		= ПараметрыЗаполнения.Сделка.ЦенаВключаетНДС;
	ОбъектЗаписи.Склад 					= ПараметрыЗаполнения.Склад;
	ОбъектЗаписи.ДатаВходящегоДокумента = ПараметрыЗаполнения.ДатаПоступления;
	ОбъектЗаписи.СуммаДокумента 		= ПараметрыЗаполнения.Сделка.СуммаДокумента;
	ОбъектЗаписи.Автор 					= Пользователи.ТекущийПользователь();
	ОбъектЗаписи.Распоряжение 			= ПараметрыЗаполнения.Сделка;
	ОбъектЗаписи.ВариантПриемкиТоваров 	= Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	
	СтрокаСпецификации = ПараметрыЗаполнения.Сделка.Товары[0];
	
	СтрокаТовары = ОбъектЗаписи.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаСпецификации);
	СтрокаТовары.Количество 		= ПараметрыЗаполнения.ОбъемПоступления;
	СтрокаТовары.КоличествоУпаковок	= ПараметрыЗаполнения.ОбъемПоступления;
	
	Попытка
		ОбъектЗаписи.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		ТекстСообщения = СтрШаблон("Документ %1 был записан и проведен", ОбъектЗаписи.Ссылка);
	Исключение
		ОбъектЗаписи.Записать(РежимЗаписиДокумента.Запись);
		ТекстСообщения = СтрШаблон("Описание ошибки: %1", ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("АРМ_Закупки.Форма.АРМ_Закупки", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПоступлениеТоваровНаСклад, ОбъектЗаписи.Ссылка, ТекстСообщения);		
	КонецПопытки;
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти


#Область СтраницаСпецификация

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                      |ГДЕ
	                      |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	                      |	И ДоговорыКонтрагентов.Партнер = &Партнер
	                      |	И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком)
	                      |	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)");
	Запрос.УстановитьПараметр("Партнер", Спецификация_Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Спецификация_Договор = Выборка.Ссылка;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокАвтоподбораНаселенногоПункта(Текст)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	СкладыКонтактнаяИнформация.Город КАК Регион
	                      |ИЗ
	                      |	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	                      |ГДЕ
	                      |	СкладыКонтактнаяИнформация.Город <> """"
	                      |	И СкладыКонтактнаяИнформация.Город ПОДОБНО &Город");
	Запрос.УстановитьПараметр("Город", СтрЗаменить("%Замена%", "Замена", Текст));
	Выборка = Запрос.Выполнить().Выбрать();	
	Данные = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл  
		СтруктураЗначения = Новый Структура(
				"Адрес, ЗагруженныеДанные, Идентификатор, Муниципальный, Отказ, ПредлагатьЗагрузкуКлассификатора, Представление",
		        "", Истина, Новый УникальныйИдентификатор, Истина, Ложь, Ложь, Выборка.Регион 
				);
		Данные.Добавить(СтруктураЗначения, Выборка.Регион);			
	КонецЦикла;
	Результат = Новый Структура("Данные, КраткоеПредставлениеОшибки, Отказ, ПодробноеПредставлениеОшибки", Данные, Неопределено, Ложь, Неопределено);
	
	УправлениеКонтактнойИнформациейСлужебный.ФорматированиеРезультатовАвтоподбора(Результат.Данные, Текст);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокПодбораСклады(Текст)
	
	Результат = Новый Структура("Данные, КраткоеПредставлениеОшибки, Отказ, ПодробноеПредставлениеОшибки", 
								Новый СписокЗначений, "", Ложь, "");	
								
	МассивПоиска = Новый Массив;
	МассивПоиска.Добавить("%");
	МассивПоиска.Добавить(СтрШаблон("%1", Текст));
	МассивПоиска.Добавить("%");
	СтрокаПоиска = СтрСоединить(МассивПоиска);							
								
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СкладыКонтактнаяИнформация.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформация
	                      |ГДЕ
	                      |	СкладыКонтактнаяИнформация.Представление ПОДОБНО &НаселенныйПункт");
	Запрос.УстановитьПараметр("НаселенныйПункт", СтрокаПоиска);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Результат.Данные.Добавить(Выборка.Ссылка);			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСумму()

	Спецификация_Сумма = Спецификация_ОбъемТовара * Спецификация_ЦенаТовараСНДС;	
	
	Если Спецификация_СтавкаНДС_Товара = "20%" Тогда 
		Спецификация_СтавкаНДСТовараПеречисление = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
		СтавкаНДС_Число	= 20;
	ИначеЕсли Спецификация_СтавкаНДС_Товара = "10%" Тогда	
		Спецификация_СтавкаНДСТовараПеречисление = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10");
		СтавкаНДС_Число	= 10;
	Иначе 	
		Спецификация_СтавкаНДСТовараПеречисление = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
		СтавкаНДС_Число = 0;	
	КонецЕсли;
	
	Спецификация_СуммаНДС = Спецификация_Сумма / (100 + СтавкаНДС_Число) * СтавкаНДС_Число;
	
КонецПроцедуры

#КонецОбласти


#Область СтраницаПеревозка

&НаСервере
Процедура ЗаполнитьПеревозкуНаОсновеСпецификации()
	
	Перевозка_ПоставщикТовара 			= Перевозка_СпецификацияНаПродукцию.Партнер;
	Перевозка_БазисПоставкиПеречисление	= Перевозка_СпецификацияНаПродукцию.СпособДоставки;		
	Если Перевозка_БазисПоставкиПеречисление = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада Тогда 
		Перевозка_БазисПоставки = "CPT";
	ИначеЕсли Перевозка_БазисПоставкиПеречисление = Перечисления.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада Тогда 
	    Перевозка_БазисПоставки = "EXW";
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура Перевозка_ПриИзменении_БазисаПоставки()
	
	Элементы.ГруппаПеревозкаEXW.Видимость = Ложь;
	Элементы.ГруппаПеревозкаCPT.Видимость = Ложь;
	Если Перевозка_БазисПоставки = "CPT" Тогда 
		Элементы.ГруппаПеревозкаCPT.Видимость = Истина;	
	ИначеЕсли Перевозка_БазисПоставки = "EXW" Тогда 	
		Элементы.ГруппаПеревозкаEXW.Видимость = Истина;			
	КонецЕсли;
			
	Если Перевозка_БазисПоставки = "CPT"
		И Перевозка_ЗаполнитьПоступлениеНаСклад Тогда 
		Перевозка_СтатусДоставки = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Закрыто");
	Иначе 
		Перевозка_СтатусДоставки = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Отправлено");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Перевозка_ВодительФИОПриИзменении_НаСервере()

	Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
	Отбор = Новый Структура("Тип, Вид, ВидДляСписка", Тип, Вид, Вид);
	НайденныеСтроки = Перевозка_ВодительФИО.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда 
		Перевозка_ВодительНомерТелефона = НайденныеСтроки[0].Представление;
	Иначе 
		Перевозка_ВодительНомерТелефона = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Пересчитать_ЦенаПеревозкиНаТоннуБезНДС()

	ЦенаС_НДС = Перевозка_ЦенаПеревозкиНаТоннуС_НДС;
	СтавкаНДС = ?(Перевозка_СтавкаНДС_0, 0, 20);
	Перевозка_ЦенаПеревозкиНаТоннуБезНДС = ЦенаС_НДС - (ЦенаС_НДС * СтавкаНДС / (100 + СтавкаНДС));
	
КонецПроцедуры	

&НаКлиенте
Процедура Пересчитать_Перевозка_ПотериНаПеревозке()
	
	Перевозка_ПотериНаПеревозке = Перевозка_ОбъемПоступления - Перевозка_ФактическийОбъемОтгрузки;
	
КонецПроцедуры	

#КонецОбласти


#Область СтраницаДопУслуги

&НаСервере
Процедура Пересчитать_ДопУслуги_СуммаНДС()
	
	Если ДопУслуги_СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда 
		СтавкаНДС = 20;
	ИначеЕсли ДопУслуги_СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда 
		СтавкаНДС = 18;
	ИначеЕсли ДопУслуги_СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда 
		СтавкаНДС = 10;
	Иначе 
		СтавкаНДС = 0;
	КонецЕсли;
	ДопУслуги_СуммаНДС = ДопУслуги_Сумма * СтавкаНДС / 100;	
	
КонецПроцедуры

#КонецОбласти


#Область ЗаписьОбъекта

&НаСервере
Функция СохранитьНаСервере()
	
	Если Не ПроверитьЗаполнение() Тогда	
		Возврат Ложь;
	КонецЕсли;
	
	МассивРеквизитов = ПолучитьМассивРеквизитовПроверки();
	Если Не ПроверитьЗаполнениеРеквизитов(МассивРеквизитов) Тогда 
		Возврат Ложь;
	КонецЕсли;

	ВыборкаОрганизации = Справочники.Организации.Выбрать();
	ВыборкаОрганизации.Следующий();
	НайденнаяВалютаRUB = Справочники.Валюты.НайтиПоНаименованию("RUB", Истина);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация"	, ВыборкаОрганизации.Ссылка);
	ПараметрыЗаполнения.Вставить("Валюта"		, НайденнаяВалютаRUB);
	
	СтрДокументы = Элементы.СтраницыДокументы;
	СтрПрочее	 = Элементы.СтраницыПрочее;
	
	Если СтрДокументы.Видимость И СтрПрочее.Видимость Тогда  
		Если СтрДокументы.ТекущаяСтраница = Элементы.СтраницаСпецификация
			И СтрПрочее.ТекущаяСтраница = Элементы.СтраницаДоговор Тогда	
		 	УспешноДоговор 		= СохранитьСправочник_Договор(ПараметрыЗаполнения);
			УспешноСпецификация = СохранитьДокумент_Спецификация(ПараметрыЗаполнения);
			Возврат УспешноДоговор И УспешноСпецификация;
		ИначеЕсли СтрДокументы.ТекущаяСтраница = Элементы.СтраницаДопУслуги
			И СтрПрочее.ТекущаяСтраница = Элементы.СтраницаДоговор Тогда 	
			УспешноДоговор 		= СохранитьСправочник_Договор(ПараметрыЗаполнения);
			УспешноДопУслуги	= СохранитьДокумент_ДопУслуги(ПараметрыЗаполнения);
			Возврат УспешноДоговор И УспешноДопУслуги;
		КонецЕсли;
		
	ИначеЕсли СтрДокументы.Видимость Тогда 
		Если СтрДокументы.ТекущаяСтраница = Элементы.СтраницаСпецификация Тогда 
			Возврат СохранитьДокумент_Спецификация(ПараметрыЗаполнения);
		ИначеЕсли СтрДокументы.ТекущаяСтраница = Элементы.СтраницаПеревозка Тогда 
			Возврат СохранитьДокумент_Перевозка(ПараметрыЗаполнения);
		ИначеЕсли СтрДокументы.ТекущаяСтраница = Элементы.СтраницаДопУслуги Тогда 
			Возврат СохранитьДокумент_ДопУслуги(ПараметрыЗаполнения);
		КонецЕсли; 
		
	ИначеЕсли СтрПрочее.Видимость Тогда
		Если СтрПрочее.ТекущаяСтраница = Элементы.СтраницаКонтрагент Тогда 
			Возврат СохранитьСправочник_Партнер_Контрагент(ПараметрыЗаполнения);
		ИначеЕсли СтрПрочее.ТекущаяСтраница = Элементы.СтраницаДоговор Тогда 
			Возврат СохранитьСправочник_Договор(ПараметрыЗаполнения);
		КонецЕсли;	
	
	КонецЕсли;	
		
КонецФункции		

&НаСервере
Функция СохранитьСправочник_Партнер_Контрагент(Параметры)
	
	Успешно = Ложь;
	
	Если Не ПустаяСтрока(Контрагент_ИНН) Тогда 
		НайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", Контрагент_ИНН);
	Иначе 
		НайденныйКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда 
		ОбъектЗаписи = СсылкаНаОбъект.ПолучитьОбъект();
	ИначеЕсли ЗначениеЗаполнено(НайденныйКонтрагент) Тогда 
		СсылкаНаОбъект = НайденныйКонтрагент.Партнер;
		ЗаписатьОтветственныеМенеджерыПартнера(СсылкаНаОбъект);
		Возврат Истина;
	Иначе 	
		ОбъектЗаписи = Справочники.Партнеры.СоздатьЭлемент();
	КонецЕсли;
	
	Если Контрагент_ВидКонтрагента = "ИндивидуальныйПредприниматель" Тогда 
		ЮрФизЛицоПартнер 			= Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		ЮрФизЛицоКонтрагента 		= Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
		ЮридическоеФизическоеЛицо 	= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Иначе 
		ЮрФизЛицоПартнер 			= Перечисления.КомпанияЧастноеЛицо.Компания;
		ЮрФизЛицоКонтрагента 		= Перечисления.ЮрФизЛицо.ЮрЛицо;
		ЮридическоеФизическоеЛицо 	= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;	
	
	Если Не ПустаяСтрока(АдресРеквизитыКонтрагента) Тогда 
		РеквизитыКонтрагента = ПолучитьИзВременногоХранилища(АдресРеквизитыКонтрагента);	
	Иначе 
		РеквизитыКонтрагента = Новый Структура;
		РеквизитыКонтрагента.Вставить("Наименование"		, Контрагент_Наименование);
		РеквизитыКонтрагента.Вставить("НаименованиеПолное"	, Контрагент_Наименование);
		РеквизитыКонтрагента.Вставить("ИНН"					, Контрагент_ИНН);
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыКонтрагента) = Тип("Структура") Тогда 
		ЗаполнитьЗначенияСвойств(ОбъектЗаписи, РеквизитыКонтрагента);		
	КонецЕсли;
	
	//ОбъектЗаписи.Поставщик                        	= Истина;
	ОбъектЗаписи.ЮрФизЛицо							= ЮрФизЛицоПартнер;
	ОбъектЗаписи.ДатаРегистрации                 	= ТекущаяДатаСеанса();		
	ОбъектЗаписи.ОсновнойМенеджер                	= Пользователи.ТекущийПользователь();
	ОбъектЗаписи.ВариантОтправкиЭлектронногоЧека 	= Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
	ОбъектЗаписи.Комментарий 						= Комментарий;
		
	НачатьТранзакцию();
	
	Попытка
			
		ОбъектЗаписи.Записать();
		ЗаписатьОтветственныеМенеджерыПартнера(ОбъектЗаписи.Ссылка);
		ЗаписатьКонтрагентаДляПартнера(ОбъектЗаписи.Ссылка, РеквизитыКонтрагента, ЮрФизЛицоКонтрагента, ЮридическоеФизическоеЛицо);
		
		ЗафиксироватьТранзакцию();
		
		СсылкаНаОбъект 	= ОбъектЗаписи.Ссылка;
		Успешно 		= Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон("Описание ошибки: %1", ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("АРМ_Закупки.Форма.АРМ_Закупки", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Партнеры,, ТекстСообщения);
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
		
	КонецПопытки;
	
	// TODO ВЫНЕСТИ ВЫШЕ В СОХРАНИТЬНАСЕРВЕРЕ
	Если Успешно Тогда 
		Модифицированность 										= Ложь;
		Элементы.СтраницыПрочее.ТекущаяСтраница.ТолькоПросмотр 	= Истина;
		Элементы.ГруппаИзменитьНастройка.Доступность 			= Истина;
		Элементы.УдалитьИЗакрыть.Доступность					= Ложь;
	КонецЕсли;	
	
	Возврат Успешно;
	
КонецФункции

&НаСервере
Функция СохранитьСправочник_Договор(Параметры)

	Успешно = Ложь;
	
	ТекстНаименованияДоговора 	= СтрШаблон("№ %1 от %2", Договор_Номер, Формат(Договор_ДатаЗаключения, "ДФ=dd.MM.yyyy"));
	НайденныйКонтрагент 		= Справочники.Контрагенты.НайтиПоРеквизиту("Партнер", Договор_Партнер);
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ОбъектЗаписи = СсылкаНаОбъект.ПолучитьОбъект();
	Иначе 
	    ОбъектЗаписи = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	КонецЕсли;
	
	ОбъектЗаписи.ВалютаВзаиморасчетов 	= Параметры.Валюта;
	ОбъектЗаписи.Организация 			= Параметры.Организация;
	
	ОбъектЗаписи.Наименование          	= ТекстНаименованияДоговора;
	ОбъектЗаписи.НаименованиеДляПечати 	= ТекстНаименованияДоговора;
	ОбъектЗаписи.Контрагент 			= НайденныйКонтрагент;
	ОбъектЗаписи.Партнер 				= Договор_Партнер;
	ОбъектЗаписи.Поставщик 				= Договор_Поставщик;
	ОбъектЗаписи.Перевозчик 			= Договор_Перевозчик;
	ОбъектЗаписи.ДопУслуги 				= Договор_ДопУслуги;
	ОбъектЗаписи.Хранение 				= Договор_Хранение;
	ОбъектЗаписи.Номер 					= Договор_Номер;
	ОбъектЗаписи.Дата 					= Договор_ДатаЗаключения;
	ОбъектЗаписи.ДатаНачалаДействия 	= Договор_ДействуетС;
	ОбъектЗаписи.ДатаОкончанияДействия 	= Договор_ДействуетПо;
				
	ОбъектЗаписи.Менеджер 										= Пользователи.ТекущийПользователь();	
	ОбъектЗаписи.ПорядокОплаты 									= Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;	
	ОбъектЗаписи.ПорядокРасчетов 								= Перечисления.ПорядокРасчетов.ПоНакладным;		
	ОбъектЗаписи.Статус 										= Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	ОбъектЗаписи.ХозяйственнаяОперация 							= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;	
	ОбъектЗаписи.ТипДоговора 									= Перечисления.ТипыДоговоров.СПоставщиком;
	ОбъектЗаписи.ВариантОформленияЗакупок 						= Перечисления.ВариантыОформленияЗакупок.НеРазделять;
	ОбъектЗаписи.НалогообложениеНДС 							= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;	
	ОбъектЗаписи.ЗакупкаПодДеятельность 						= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ОбъектЗаписи.НалогообложениеНДСОпределяетсяВДокументе 		= Истина;
	ОбъектЗаписи.ЗакупкаПодДеятельностьОпределяетсяВДокументе 	= Истина;
	ОбъектЗаписи.ВариантПриемкиТоваров 							= Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	ОбъектЗаписи.СпособДоставки 								= Перечисления.СпособыДоставки.ОпределяетсяВРаспоряжении;
	
	ОбъектЗаписи.Комментарий = Комментарий;
		
	НачатьТранзакцию();
	
	Попытка
			
		ОбъектЗаписи.Записать();

		ЗафиксироватьТранзакцию();
		
		СсылкаНаОбъект 			= ОбъектЗаписи.Ссылка;
		Спецификация_Договор 	= ОбъектЗаписи.Ссылка;
		ДопУслуги_Договор		= ОбъектЗаписи.Ссылка;
		Успешно 				= Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон("Описание ошибки: %1", ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("АРМ_Закупки.Форма.АРМ_Закупки", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ДоговорыКонтрагентов,, ТекстСообщения);
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
		
	КонецПопытки;
	
	// TODO ВЫНЕСТИ ВЫШЕ В СОХРАНИТЬНАСЕРВЕРЕ
	Если Успешно Тогда 
		Модифицированность 										= Ложь;
		Элементы.СтраницыПрочее.ТекущаяСтраница.ТолькоПросмотр 	= Истина;
		Элементы.ГруппаИзменитьНастройка.Доступность 			= Истина;
		Элементы.УдалитьИЗакрыть.Доступность					= Ложь;
	КонецЕсли;	
	
	Возврат Успешно;	
	
КонецФункции

&НаСервере
Функция СохранитьДокумент_Спецификация(Параметры)
	
	Успешно = Ложь;	
		
	НайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("Партнер", Спецификация_Партнер);
	
	Если ЗначениеЗаполнено(СсылкаНаОбъектДоп) Тогда 
		ОбъектЗаписи = СсылкаНаОбъектДоп.ПолучитьОбъект();
	Иначе 
		ОбъектЗаписи = Документы.ЗаказПоставщику.СоздатьДокумент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбъектЗаписи, Параметры);
		
	ОбъектЗаписи.Контрагент 				= НайденныйКонтрагент;
	ОбъектЗаписи.Партнер 					= Спецификация_Партнер;
	ОбъектЗаписи.Договор 					= Спецификация_Договор;
	ОбъектЗаписи.НомерПоДаннымПоставщика 	= Спецификация_Номер;
	ОбъектЗаписи.ДатаПоДаннымПоставщика 	= Спецификация_ДатаЗаключения;
	ОбъектЗаписи.ДатаОкончанияСпецификации 	= Спецификация_ДатаОкончанияСпецификации;
	ОбъектЗаписи.КурсДоллараНаМоментОплаты	= Спецификация_КурсДоллараНаМоментОплаты;
	ОбъектЗаписи.СпособДоставки 			= Спецификация_БазисПоставкиПеречисление;
	ОбъектЗаписи.ТипПеревозки 				= Спецификация_ТипПеревозки;
	ОбъектЗаписи.Склад 						= Спецификация_СкладГрузополучателя;
	ОбъектЗаписи.Комментарий 				= Комментарий;
	ОбъектЗаписи.Дата 						= ТекущаяДатаСеанса();
	ОбъектЗаписи.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки;
	ОбъектЗаписи.ЖелаемаяДатаПоступления 	= ТекущаяДатаСеанса();
	ОбъектЗаписи.Менеджер 					= Пользователи.ТекущийПользователь();
	ОбъектЗаписи.Автор 						= Пользователи.ТекущийПользователь();
	ОбъектЗаписи.Подразделение 				= ОбъектЗаписи.Менеджер.Подразделение;
	ОбъектЗаписи.ДатаСогласования 			= ТекущаяДатаСеанса();
	ОбъектЗаписи.НалогообложениеНДС 		= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ОбъектЗаписи.ЦенаВключаетНДС 			= Истина;
	ОбъектЗаписи.ЗакупкаПодДеятельность 	= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ОбъектЗаписи.Согласован 				= Истина;
	ОбъектЗаписи.Статус 					= Перечисления.СтатусыЗаказовПоставщикам.Согласован;
	ОбъектЗаписи.СуммаДокумента				= Спецификация_Сумма;
	ОбъектЗаписи.Приоритет					= Справочники.Приоритеты.НайтиПоНаименованию("Средний", Истина);		
	ОбъектЗаписи.ПорядокРасчетов			= Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	ОбъектЗаписи.ПорядокОплаты              = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	ОбъектЗаписи.ВариантПриемкиТоваров      = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	
	ОбъектЗаписи.Товары.Очистить();
	СтрокаТовары = ОбъектЗаписи.Товары.Добавить();
	СтрокаТовары.Номенклатура 		= Спецификация_ВидПродукции;
	СтрокаТовары.Количество 		= Спецификация_ОбъемТовара;
	СтрокаТовары.КоличествоУпаковок = Спецификация_ОбъемТовара;
	СтрокаТовары.Цена 				= Спецификация_ЦенаТовараСНДС;
	СтрокаТовары.Сумма 				= Спецификация_Сумма;
	СтрокаТовары.СтавкаНДС 			= Спецификация_СтавкаНДСТовараПеречисление;
	СтрокаТовары.СуммаНДС 			= Спецификация_СуммаНДС;	
	СтрокаТовары.СуммаСНДС 			= Спецификация_Сумма;
	СтрокаТовары.Склад				= ОбъектЗаписи.Склад;
	
	ОбъектЗаписи.ЭтапыГрафикаОплаты.Очистить();
	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаЗакупки(
			ОбъектЗаписи,
			Ложь,
			Спецификация_Сумма,
			0);
			
	СтрокаОплаты = ОбъектЗаписи.ЭтапыГрафикаОплаты.Добавить();		
	СтрокаОплаты.ВариантОплаты	= Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления;
	СтрокаОплаты.ДатаПлатежа	= ТекущаяДатаСеанса();
	СтрокаОплаты.ПроцентПлатежа	= 100;
	СтрокаОплаты.СуммаПлатежа	= Спецификация_Сумма;		
	
	НачатьТранзакцию();
	
	Попытка
		ОбъектЗаписи.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		ДобавитьПрисоединенныеФайлы(ОбъектЗаписи.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
		СсылкаНаОбъект 	= ОбъектЗаписи.Ссылка;
		Успешно 		= Истина;
		Элементы.Спецификация_СоздатьПрисоединенныйФайл.Доступность = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбъектЗаписи.Записать(РежимЗаписиДокумента.Запись);
		
		ТекстСообщения = СтрШаблон("Описание ошибки: %1", ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("АРМ_Закупки.Форма.АРМ_Закупки", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаказПоставщику, ОбъектЗаписи.Ссылка, ТекстСообщения);
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
		
	КонецПопытки;			
	
	// TODO ВЫНЕСТИ ВЫШЕ В СОХРАНИТЬНАСЕРВЕРЕ
	Если Успешно Тогда 
		Модифицированность 											= Ложь;
		Элементы.СтраницыДокументы.ТекущаяСтраница.ТолькоПросмотр 	= Истина;
		Элементы.ГруппаИзменитьНастройка.Доступность 				= Истина;
		Элементы.УдалитьИЗакрыть.Доступность						= Ложь;
	КонецЕсли;	
		
	Возврат Успешно;
	
КонецФункции

&НаСервере
Функция СохранитьДокумент_Перевозка(Параметры)

	Успешно 			= Ложь;		
	КлючСвязи 			= Новый УникальныйИдентификатор;
	НайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("Партнер", Перевозка_ПоставщикТовара);
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда 
		ОбъектЗаписиПеревозка = СсылкаНаОбъект.ПолучитьОбъект();		
	Иначе 
		ОбъектЗаписиПеревозка = Документы.ЗаданиеНаПеревозку.СоздатьДокумент();	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъектДоп) Тогда 
		ОбъектЗаписиПоступление = СсылкаНаОбъектДоп.ПолучитьОбъект();	
	Иначе 
		ОбъектЗаписиПоступление = Документы.ПоступлениеТоваровНаСклад.СоздатьДокумент();
	КонецЕсли;	
	
	// ЗаданиеНаПеревозку
	Если Перевозка_БазисПоставки = "EXW" Тогда 
		ЗаполнитьЗначенияСвойств(ОбъектЗаписиПеревозка, Параметры);
		
		ОбъектЗаписиПеревозка.Дата 								= ТекущаяДатаСеанса();
		ОбъектЗаписиПеревозка.Операция 							= Перечисления.ВидыДоставки.НаСклад;
		ОбъектЗаписиПеревозка.Ответственный 					= Пользователи.ТекущийПользователь();
		ОбъектЗаписиПеревозка.АвтомобильГосударственныйНомер 	= Перевозка_ТранспортноеСредство_НомерТранспортногоСредства;
		ОбъектЗаписиПеревозка.ЛицензионнаяКарточкаВид 			= "Стандартная";
		ОбъектЗаписиПеревозка.ТранспортноеСредство 				= ЗаписатьИПолучитьТранспортноеСредство();
		ОбъектЗаписиПеревозка.НомерТТН_ЖДН 						= Перевозка_НомерТТН_ЖДН;
		ОбъектЗаписиПеревозка.ДатаТТН_ЖДН 						= Перевозка_ДатаОтгрузки;
		ОбъектЗаписиПеревозка.Водитель 							= Перевозка_ВодительФИО;
		ОбъектЗаписиПеревозка.Склад 							= Перевозка_АдресНаправления_СкладНазначения;
		ОбъектЗаписиПеревозка.Перевозчик 						= Перевозка_Перевозчик;
		ОбъектЗаписиПеревозка.ПеревозчикДоп 					= Перевозка_Перевозчик;
		ОбъектЗаписиПеревозка.ДоговорСПоставщиком 				= Перевозка_ДоговорСПеревозчиком;
		ОбъектЗаписиПеревозка.Вес 								= Перевозка_ФактическийОбъемОтгрузки;
		ОбъектЗаписиПеревозка.ЦенаПеревозкиНаТонну_с_НДС 		= Перевозка_ЦенаПеревозкиНаТоннуС_НДС;
		ОбъектЗаписиПеревозка.ЦенаПеревозкиНаТонну_без_НДС 		= Перевозка_ЦенаПеревозкиНаТоннуБезНДС;
		ОбъектЗаписиПеревозка.СтавкаНДС 						= ?(Перевозка_СтавкаНДС_20, Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.БезНДС);
		ОбъектЗаписиПеревозка.КоличествоПунктов 				= 1;
		ОбъектЗаписиПеревозка.ЗаданиеВыполняет 					= Перечисления.ТипыИсполнителейЗаданийНаПеревозку.Перевозчик;
		ОбъектЗаписиПеревозка.Приоритет 						= Справочники.Приоритеты.НайтиПоНаименованию("Средний", Истина);
		ОбъектЗаписиПеревозка.ТипПеревозки 						= Перечисления.ТипыПеревозки.Авто;
		ОбъектЗаписиПеревозка.Статус 							= Перечисления.СтатусыЗаданийНаПеревозку.Формируется;
		ОбъектЗаписиПеревозка.Комментарий 						= Комментарий;
			
		ОбъектЗаписиПеревозка.Маршрут.Очистить();
		ОбъектЗаписиПеревозка.Распоряжения.Очистить();
		
		СтрокаМаршрута = ОбъектЗаписиПеревозка.Маршрут.Добавить();
		СтрокаМаршрута.КлючСвязи 			= КлючСвязи;
		СтрокаМаршрута.Адрес                = Перевозка_АдресНаправления_Город;
		СтрокаМаршрута.Вес                  = Перевозка_ФактическийОбъемОтгрузки;
		СтрокаМаршрута.АдресЗначенияПолей 	= ПолучитьЗначениеПредставленияАдресаМаршрута();
		
		СтрокаРаспоряжения = ОбъектЗаписиПеревозка.Распоряжения.Добавить();     
		СтрокаРаспоряжения.КлючСвязи				= КлючСвязи;
		СтрокаРаспоряжения.Распоряжение 			= Перевозка_СпецификацияНаПродукцию;	
		СтрокаРаспоряжения.Вес 						= Перевозка_ФактическийОбъемОтгрузки;
		СтрокаРаспоряжения.ПолучательОтправитель 	= Перевозка_ПоставщикТовара;
		СтрокаРаспоряжения.Склад 					= Перевозка_АдресНаправления_СкладНазначения;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		 
		Если Перевозка_БазисПоставки = "EXW" Тогда 
			ОбъектЗаписиПеревозка.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			ДобавитьПрисоединенныеФайлы(ОбъектЗаписиПеревозка.Ссылка);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Если Перевозка_БазисПоставки = "EXW" Тогда
			СсылкаНаОбъект = ОбъектЗаписиПеревозка.Ссылка;
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Если Перевозка_БазисПоставки = "EXW" Тогда
			ОбъектЗаписиПеревозка.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон("Описание ошибки: %1", ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("АРМ_Закупки.Форма.АРМ_Закупки", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаданиеНаПеревозку, ОбъектЗаписиПеревозка.Ссылка, ТекстСообщения);
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
		
	КонецПопытки;		
		
	// ПоступлениеТоваровНаСклад 
	ЗаполнитьЗначенияСвойств(ОбъектЗаписиПоступление, Параметры);
	
	ОбъектЗаписиПоступление.НомерВходящегоДокумента = Перевозка_НомерТТН_ЖДН;
	ОбъектЗаписиПоступление.Дата 					= ТекущаяДатаСеанса();
	ОбъектЗаписиПоступление.Партнер 				= Перевозка_ПоставщикТовара;
	ОбъектЗаписиПоступление.Контрагент 				= НайденныйКонтрагент;
	ОбъектЗаписиПоступление.ХозяйственнаяОперация 	= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка;
	ОбъектЗаписиПоступление.Договор 				= Перевозка_ДоговорСПеревозчиком;
	ОбъектЗаписиПоступление.Менеджер 				= Пользователи.ТекущийПользователь();
	ОбъектЗаписиПоступление.НалогообложениеНДС 		= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ОбъектЗаписиПоступление.ВидДеятельностиНДС 		= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ОбъектЗаписиПоступление.ЦенаВключаетНДС 		= Перевозка_СпецификацияНаПродукцию.ЦенаВключаетНДС;
	ОбъектЗаписиПоступление.Склад 					= Перевозка_АдресПоступления_СкладПоступления;
	ОбъектЗаписиПоступление.ДатаВходящегоДокумента 	= Перевозка_ДатаПоступления;
	ОбъектЗаписиПоступление.СуммаДокумента 			= Перевозка_СпецификацияНаПродукцию.СуммаДокумента;
	ОбъектЗаписиПоступление.Автор 					= Пользователи.ТекущийПользователь();
	ОбъектЗаписиПоступление.Распоряжение 			= Перевозка_СпецификацияНаПродукцию;
	ОбъектЗаписиПоступление.ВариантПриемкиТоваров 	= Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	
	ОбъектЗаписиПоступление.Товары.Очистить();
	ОбъектЗаписиПоступление.ВидыЗапасов.Очистить();
	ОбъектЗаписиПоступление.Серии.Очистить();
	
	СтрокаСпецификации = Перевозка_СпецификацияНаПродукцию.Товары[0];
	
	СтрокаТовары = ОбъектЗаписиПоступление.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаСпецификации);
	Если Перевозка_БазисПоставки = "EXW" Тогда 
		СтрокаТовары.ДоставкаПоставщика = Истина;
		СтрокаТовары.Аналитика 			= ОбъектЗаписиПеревозка;
		СтрокаТовары.Количество 		= Перевозка_ОбъемПоступления;
		СтрокаТовары.КоличествоУпаковок = Перевозка_ОбъемПоступления;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		 
		ОбъектЗаписиПоступление.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		ДобавитьПрисоединенныеФайлы(ОбъектЗаписиПоступление.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
		СсылкаНаОбъектДоп 	= ОбъектЗаписиПоступление.Ссылка;
		Успешно 			= Истина;
		Элементы.Перевозка_СоздатьПрисоединенныйФайл.Доступность = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбъектЗаписиПоступление.Записать(РежимЗаписиДокумента.Запись);
		
		ТекстСообщения = СтрШаблон("Описание ошибки: %1", ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("АРМ_Закупки.Форма.АРМ_Закупки", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ПоступлениеТоваровНаСклад, ОбъектЗаписиПоступление.Ссылка, ТекстСообщения);
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
		
	КонецПопытки;			
	
	// TODO ВЫНЕСТИ ВЫШЕ В СОХРАНИТЬНАСЕРВЕРЕ
	Если Успешно Тогда 
		Модифицированность 											= Ложь;
		Элементы.СтраницыДокументы.ТекущаяСтраница.ТолькоПросмотр 	= Истина;
		Элементы.ГруппаИзменитьНастройка.Доступность 				= Истина;
		Элементы.УдалитьИЗакрыть.Доступность						= Ложь;
	КонецЕсли;	
		
	Возврат Успешно;	
	
КонецФункции

&НаСервере
Функция СохранитьДокумент_ДопУслуги(Параметры)
	
	Успешно = Ложь;	
		
	НайденныйКонтрагент = Справочники.Контрагенты.НайтиПоРеквизиту("Партнер", ДопУслуги_Партнер);
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда 
		ОбъектЗаписи = СсылкаНаОбъект.ПолучитьОбъект();
	Иначе 
		ОбъектЗаписи = Документы.ЗаявкаНаУслуги.СоздатьДокумент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбъектЗаписи, Параметры);
	
	ОбъектЗаписи.Статус 					= Перечисления.СтатусыЗаявокНаУслуги.ВРаботе;
	ОбъектЗаписи.НомерЗаявкиСпецификации 	= ДопУслуги_НомерЗаявкиСпецификации;
	ОбъектЗаписи.Дата 						= ТекущаяДатаСеанса();
	ОбъектЗаписи.ДатаЗаключения 			= ДопУслуги_ДатаЗаключения;
	ОбъектЗаписи.ДатаИсполнения 			= ДопУслуги_ДатаИсполнения;
	ОбъектЗаписи.Партнер 					= ДопУслуги_Партнер;
	ОбъектЗаписи.Контрагент 				= НайденныйКонтрагент;
	ОбъектЗаписи.Договор 					= ДопУслуги_Договор;
	ОбъектЗаписи.Распоряжение 				= ДопУслуги_Распоряжение;
	ОбъектЗаписи.ОписаниеУслуги 			= ДопУслуги_ОписаниеУслуги;	
	ОбъектЗаписи.Сумма 						= ДопУслуги_Сумма;
	ОбъектЗаписи.СтавкаНДС 					= ДопУслуги_СтавкаНДС;		
	ОбъектЗаписи.СуммаНДС 					= ДопУслуги_СуммаНДС;
	ОбъектЗаписи.Ответственный 				= Пользователи.ТекущийПользователь();
	ОбъектЗаписи.Комментарий 				= Комментарий;
	
	НачатьТранзакцию();
	
	Попытка
		ОбъектЗаписи.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		ДобавитьПрисоединенныеФайлы(ОбъектЗаписи.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
		СсылкаНаОбъект 	= ОбъектЗаписи.Ссылка;
		Успешно 		= Истина;
		Элементы.ДопУслуги_СоздатьПрисоединенныйФайл.Доступность = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбъектЗаписи.Записать(РежимЗаписиДокумента.Запись);
		
		ТекстСообщения = СтрШаблон("Описание ошибки: %1", ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("АРМ_Закупки.Форма.АРМ_Закупки", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЗаявкаНаУслуги, ОбъектЗаписи.Ссылка, ТекстСообщения);
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстСообщения;
		СообщениеПользователю.Сообщить();
		
	КонецПопытки;			
	
	// TODO ВЫНЕСТИ ВЫШЕ В СОХРАНИТЬНАСЕРВЕРЕ
	Если Успешно Тогда 
		Модифицированность 											= Ложь;
		Элементы.СтраницыДокументы.ТекущаяСтраница.ТолькоПросмотр 	= Истина;
		Элементы.ГруппаИзменитьНастройка.Доступность 				= Истина;
		Элементы.УдалитьИЗакрыть.Доступность						= Ложь;
	КонецЕсли;	
		
	Возврат Успешно;	
	
КонецФункции

&НаСервере
Процедура УстановитьПометкуУдаления(Ссылка)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПолученныйОбъект = Ссылка.ПолучитьОбъект();
		ПолученныйОбъект.ПометкаУдаления = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПолученныйОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОтветственныеМенеджерыПартнера(ПартнерСсылка)
	
	МенеджерЗаписи = РегистрыСведений.ОтветственныеМенеджерыПартнера.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Партнер	= ПартнерСсылка;
	МенеджерЗаписи.Менеджер	= Пользователи.ТекущийПользователь();
	МенеджерЗаписи.Записать(Истина);
		
КонецПроцедуры
		
&НаСервере
Процедура ЗаписатьКонтрагентаДляПартнера(ПартнерСсылка, РеквизитыКонтрагента, ЮрФизЛицоКонтрагента, ЮридическоеФизическоеЛицо)
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Контрагенты.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Контрагенты КАК Контрагенты
	                      |ГДЕ
	                      |	Контрагенты.Партнер = &Партнер");
	Запрос.УстановитьПараметр("Партнер", ПартнерСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ОбъектКонтрагент = Выборка.Ссылка.ПолучитьОбъект();
	Иначе 	
		ОбъектКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	КонецЕсли;
	
	ОбъектПартнер = ПартнерСсылка.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(ОбъектКонтрагент, РеквизитыКонтрагента);
	
	ОбъектКонтрагент.Партнер					= ПартнерСсылка;
	ОбъектКонтрагент.СтранаРегистрации			= Справочники.СтраныМира.Россия;
	ОбъектКонтрагент.ЮрФизЛицо					= ЮрФизЛицоКонтрагента;
	ОбъектКонтрагент.ЮридическоеФизическоеЛицо 	= ЮридическоеФизическоеЛицо;
	
	Тип 			= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	Вид 			= Справочники.ВидыКонтактнойИнформации.EmailПартнера;
	Представление 	= Контрагент_ЭлектроннаяПочта;
	ЗаписатьКИ(ОбъектПартнер, Тип, Вид, Представление);
	
	Тип 			= Перечисления.ТипыКонтактнойИнформации.Телефон;
	Вид 			= Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
	Представление 	= Контрагент_Телефон;
	ЗаписатьКИ(ОбъектПартнер, Тип, Вид, Представление);
	
	Тип 			= Перечисления.ТипыКонтактнойИнформации.Адрес;
	Вид 			= Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	Представление 	= Контрагент_ПочтовыйАдрес;
	ЗаписатьКИ(ОбъектКонтрагент, Тип, Вид, Представление);
	
	Тип 			= Перечисления.ТипыКонтактнойИнформации.Адрес;
	Вид 			= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	Представление 	= Контрагент_ЮридическийАдрес;
	ЗаписатьКИ(ОбъектКонтрагент, Тип, Вид, Представление);	
	
	ОбъектПартнер.Записать();
	ОбъектКонтрагент.Записать();	

КонецПроцедуры

&НаСервере
Процедура ЗаписатьКИ(Объект, Тип, Вид, Представление)
	
	ОбъектXDTOКИ = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOПоПредставлению(Представление, Тип);
	ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(ОбъектXDTOКИ);
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, Вид, Тип);
	
КонецПроцедуры	

&НаСервере
Функция ЗаписатьИПолучитьТранспортноеСредство()
	
	Если Не ЗначениеЗаполнено(Перевозка_ТранспортноеСредство_НомерТранспортногоСредства) Тогда 
		Возврат Справочники.ТранспортныеСредства.ПустаяСсылка();
	КонецЕсли;
	
	ОбъектЗаписи = Справочники.ТранспортныеСредства.СоздатьЭлемент();
	ОбъектЗаписи.Наименование 				= СтрШаблон("%1 %2", Перевозка_ТранспортноеСредство_ТипТранспорта, Перевозка_ТранспортноеСредство_НомерТранспортногоСредства);
	ОбъектЗаписи.Тип 						= Перевозка_ТранспортноеСредство_ТипТранспорта;
	ОбъектЗаписи.Код 						= Перевозка_ТранспортноеСредство_НомерТранспортногоСредства;
	ОбъектЗаписи.ЛицензионнаяКарточкаВид 	= "Стандартная";
	ОбъектЗаписи.Записать();
	
	Возврат ОбъектЗаписи.Ссылка;
	
КонецФункции

&НаСервере
Процедура ДобавитьПрисоединенныеФайлы(СсылкаВладелец)
		
	Для Каждого ПрисоединенныйФайл Из СписокПрисоединенныхФайлов Цикл 
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор"				, Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов"	, СсылкаВладелец);
		ПараметрыФайла.Вставить("ИмяБезРасширения"	, ПрисоединенныйФайл.Представление);
		ПараметрыФайла.Вставить("РасширениеБезТочки", ПрисоединенныйФайл.Значение.Расширение);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		ПараметрыФайла.Вставить("Служебный"			, Ложь);
		
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
			ПараметрыФайла, ПрисоединенныйФайл.Значение.Адрес);

	КонецЦикла;
			
КонецПроцедуры
		
#КонецОбласти


#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура СброситьПометкиКомандШапки(Элементы)
	
	Элементы.ОсновноеМеню.Пометка 				= Ложь;
	Элементы.ПерейтиРеестрКонтрагентов.Пометка 	= Ложь;
	Элементы.ПерейтиКонтрагент.Пометка 			= Ложь;
	Элементы.ПерейтиРеестрДоговоров.Пометка 	= Ложь;
	Элементы.ПерейтиДоговор.Пометка 			= Ложь;
	Элементы.ПерейтиСпецификация.Пометка 		= Ложь;
	Элементы.ПерейтиПеревозка.Пометка			= Ложь;
	Элементы.ПерейтиДопУслуги.Пометка           = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписьТекущейСтраницы()
	
	ПеремЗаголовок = "";
	
	СтрДокументы 	= Элементы.СтраницыДокументы;
	СтрПрочее 		= Элементы.СтраницыПрочее;
	
	Если СтрДокументы.Видимость Тогда 
		ПеремЗаголовок = СтрДокументы.ТекущаяСтраница.Заголовок;
		
	ИначеЕсли СтрПрочее.Видимость Тогда 
		ПеремЗаголовок = СтрПрочее.ТекущаяСтраница.Заголовок;
		
	ИначеЕсли СтрДокументы.Видимость И СтрПрочее.Видимость Тогда 	
		ПеремЗаголовок = СтрШаблон("%1 и %2", СтрПрочее.ТекущаяСтраница.Заголовок, СтрДокументы.ТекущаяСтраница.Заголовок);
		
	КонецЕсли;
	
	ЭтаФорма.Заголовок = СтрШаблон("%1", ПеремЗаголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеСтраниц(Элемент, ТекущаяСтраница)

	ИнициализироватьСтраницы();
	
	Элементы.ГруппаИзменитьНастройка.Доступность 			= Ложь;
	Элементы.УдалитьИЗакрыть.Доступность					= Ложь;
	Элементы.Договор_НеПодразумеваетСпецификацию.Видимость 	= Истина;
		
	Если ТекущаяСтраница = Элементы.СтраницаОсновноеМеню Тогда 
		Элементы.СтраницыДокументы.Видимость		= Ложь;
		Элементы.СтраницыПрочее.Видимость			= Истина;
		Элементы.ГруппаСохранить.Видимость 			= Ложь;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Ложь;	
		Элементы.ГруппаШапкаПрочее.Видимость 		= Ложь;
		Элементы.ГруппаДоговор.Видимость			= Ложь;
		ОснМеню_СкрытьЗавершенныеСделки = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРеестрКонтрагентов Тогда
		Элементы.СтраницыДокументы.Видимость		= Ложь;
		Элементы.СтраницыПрочее.Видимость			= Истина;
		Элементы.ГруппаСохранить.Видимость 			= Ложь;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Ложь;
		Элементы.ГруппаШапкаПрочее.Видимость 		= Ложь;
		Элементы.ГруппаДоговор.Видимость			= Ложь;
	
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРеестрДоговоров Тогда
		Элементы.СтраницыДокументы.Видимость		= Ложь;
		Элементы.СтраницыПрочее.Видимость			= Истина;
		Элементы.ГруппаСохранить.Видимость 			= Ложь;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Ложь;
		Элементы.ГруппаШапкаПрочее.Видимость 		= Ложь;
		Элементы.ГруппаДоговор.Видимость			= Ложь;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКонтрагент Тогда
		Элементы.СтраницыДокументы.Видимость		= Ложь;
		Элементы.СтраницыПрочее.Видимость			= Истина;
		Элементы.ГруппаСохранить.Видимость 			= Истина;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Истина;
		Элементы.ГруппаСпецификация.Видимость 		= Ложь;
		Элементы.ГруппаКонтрагент.Видимость 		= Истина;
		Элементы.ГруппаДоговор.Видимость			= Ложь;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДоговор Тогда
		Элементы.СтраницыДокументы.Видимость		= Ложь;
		Элементы.СтраницыПрочее.Видимость			= Истина;
		Элементы.ГруппаСохранить.Видимость 			= Истина;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Ложь;
		Элементы.ГруппаДоговор.Видимость			= Истина;
		Элементы.ГруппаДопУслугиДоговор.Видимость	= Ложь;
		Элементы.ГруппаВыборДоговора.Видимость		= Ложь;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСпецификация Тогда
		Элементы.СтраницыДокументы.Видимость		= Истина;
		Элементы.СтраницыПрочее.Видимость			= Ложь;
		Элементы.ГруппаСохранить.Видимость 			= Истина;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Истина;
		Элементы.ГруппаСпецификация.Видимость 		= Истина;
		Элементы.ГруппаКонтрагент.Видимость 		= Ложь;
		Элементы.ГруппаДоговор.Видимость			= Ложь;
		Элементы.ГруппаВыборДоговора.Видимость		= Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПеревозка Тогда
		Элементы.СтраницыДокументы.Видимость		= Истина;
		Элементы.СтраницыПрочее.Видимость			= Ложь;
		Элементы.ГруппаСохранить.Видимость 			= Истина;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Ложь;	
		
		Элементы.ГруппаПеревозкаEXW.Видимость			= Ложь;
		Элементы.ГруппаПеревозкаCPT.Видимость			= Ложь;
		Элементы.Перевозка_ОбъемПоступления.Видимость 	= Ложь;
		Элементы.Перевозка_ПотериНаПеревозке.Видимость 	= Ложь;
		Перевозка_СтатусДоставки 						= ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Отправлено");
		Перевозка_СтавкаНДС_0							= Истина;
		Элементы.ГруппаАдресПоступления.Видимость 		= Ложь;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДопУслуги Тогда
		Элементы.СтраницыДокументы.Видимость		= Истина;
		Элементы.СтраницыПрочее.Видимость			= Ложь;
		Элементы.ГруппаСохранить.Видимость 			= Истина;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Ложь;
		Элементы.ГруппаДопУслугиДоговор.Видимость	= Истина;
		
	Иначе 
		Элементы.СтраницыДокументы.Видимость		= Ложь;
		Элементы.СтраницыПрочее.Видимость			= Истина;
		Элементы.ГруппаСохранить.Видимость 			= Ложь;
		Элементы.ГруппаСохранитьИПерейти.Видимость 	= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтраницы()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого Реквизит Из ОбработкаОбъект.Метаданные().Реквизиты Цикл
		Объект[Реквизит.Имя] = Неопределено;		
	КонецЦикла;
		
	СброситьЗначенияРеквизитовФормы(ЭтаФорма);
	
	Для Каждого ПодчиненнаяСтраница Из Элементы.СтраницыПрочее.ПодчиненныеЭлементы Цикл 
		ПодчиненнаяСтраница.ТолькоПросмотр = Ложь;
	КонецЦикла;
	
	Для Каждого ПодчиненнаяСтраница Из Элементы.СтраницыДокументы.ПодчиненныеЭлементы Цикл 
		ПодчиненнаяСтраница.ТолькоПросмотр = Ложь;
	КонецЦикла;
	
	Элементы.Контрагент_ВидКонтрагента.СписокВыбора.Очистить();
	Для Каждого Перечисление Из Метаданные.Перечисления.ЮрФизЛицо.ЗначенияПеречисления Цикл 
		Элементы.Контрагент_ВидКонтрагента.СписокВыбора.Добавить(Перечисление.Имя, Перечисление.Представление());
	КонецЦикла;

	СписокПрисоединенныхФайлов.Очистить();
	
КонецПроцедуры

&НаСервере
Функция РеквизитОтноситсяКТекущейСтранице(Реквизит, масТекущиеСтраницы)
	
	Ответ = Ложь;
	
	Для Каждого ГруппаФормы Из масТекущиеСтраницы Цикл 
		Для Каждого Элемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл
			
			Если Тип(Элемент) = Тип("ГруппаФормы") Тогда 
				масЭлемент = Новый Массив;
				масЭлемент.Добавить(Элемент);
				Ответ = РеквизитОтноситсяКТекущейСтранице(Реквизит, масЭлемент);
				
			ИначеЕсли Тип(Элемент) = Тип("ПолеФормы") Тогда  
				Если Элемент.ПутьКДанным = Реквизит Тогда 
					Ответ = Истина;
				Иначе 
					Ответ = Ложь;
				КонецЕсли;
				
			КонецЕсли;	
			
			Если Ответ Тогда 
				Возврат Ответ;
			КонецЕсли;		
			
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

&НаСервере
Процедура СброситьЗначенияРеквизитовФормы(ГруппаФормы)
	
	Для Каждого Элемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл 
		Если Тип(Элемент) = Тип("ГруппаФормы") Тогда 
			СброситьЗначенияРеквизитовФормы(Элемент);
			
		ИначеЕсли Тип(Элемент) = Тип("ПолеФормы") Тогда  
			ТекстОператора = СтрШаблон("%1 = Неопределено", Элемент.ПутьКДанным);
			Выполнить(ТекстОператора);
			
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтобразитьДопРеквизитыДокумента()
	
	Если Договор_НеПодразумеваетСпецификацию Тогда 
		Если Договор_Поставщик Тогда 	
			Элементы.СтраницыДокументы.Видимость 		= Истина;
			Элементы.СтраницыДокументы.ТекущаяСтраница 	= Элементы.СтраницаСпецификация;	
			
		ИначеЕсли Договор_ДопУслуги Или Договор_Хранение Тогда 
			Элементы.СтраницыДокументы.Видимость 		= Истина;
			Элементы.СтраницыДокументы.ТекущаяСтраница 	= Элементы.СтраницаДопУслуги;
			
		КонецЕсли;
		
	Иначе
		Элементы.СтраницыДокументы.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивРеквизитовПроверки()
	
	МассивРеквизитов = Новый Массив;
	Если Элементы.СтраницыДокументы.Видимость Тогда 
		
		// Страница Перевозка
		Если Элементы.СтраницыДокументы.ТекущаяСтраница = Элементы.СтраницаПеревозка Тогда 
			Если Элементы.ГруппаПеревозкаCPT.Видимость Тогда 
				
				МассивРеквизитов.Добавить("Перевозка_ОбъемПоступления");
				МассивРеквизитов.Добавить("Перевозка_АдресПоступления_Город");
				МассивРеквизитов.Добавить("Перевозка_АдресПоступления_СкладПоступления");
				МассивРеквизитов.Добавить("Перевозка_ДатаПоступления");	
				
			ИначеЕсли Элементы.ГруппаПеревозкаEXW.Видимость Тогда 	
				
				МассивРеквизитов.Добавить("Перевозка_ДатаОтгрузки");
				МассивРеквизитов.Добавить("Перевозка_ТранспортноеСредство_ТипТранспорта");
				МассивРеквизитов.Добавить("Перевозка_ТранспортноеСредство_НомерТранспортногоСредства");
				МассивРеквизитов.Добавить("Перевозка_Перевозчик");
				МассивРеквизитов.Добавить("Перевозка_ДоговорСПеревозчиком");
				МассивРеквизитов.Добавить("Перевозка_ВодительФИО");
				МассивРеквизитов.Добавить("Перевозка_ВодительНомерТелефона");
				МассивРеквизитов.Добавить("Перевозка_АдресНаправления_Город");
				МассивРеквизитов.Добавить("Перевозка_АдресНаправления_СкладНазначения");
				МассивРеквизитов.Добавить("Перевозка_ФактическийОбъемОтгрузки");
				МассивРеквизитов.Добавить("Перевозка_ЦенаПеревозкиНаТоннуС_НДС");
				МассивРеквизитов.Добавить("Перевозка_ЦенаПеревозкиНаТоннуБезНДС");
				
				Если Перевозка_ЗаполнитьПоступлениеНаСклад Тогда 				
					МассивРеквизитов.Добавить("Перевозка_ОбъемПоступления");
					МассивРеквизитов.Добавить("Перевозка_ПотериНаПеревозке");
					МассивРеквизитов.Добавить("Перевозка_АдресПоступления_Город");
					МассивРеквизитов.Добавить("Перевозка_АдресПоступления_СкладПоступления");
					МассивРеквизитов.Добавить("Перевозка_ДатаПоступления");	
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.СтраницыПрочее.Видимость Тогда 
		
		// Страница Договор
		Если Элементы.СтраницыПрочее.ТекущаяСтраница = Элементы.СтраницаДоговор Тогда
			Если Не Договор_Бессрочный Тогда 
				МассивРеквизитов.Добавить("Договор_ДействуетПо");			
			КонецЕсли;
			
		Иначе 
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат МассивРеквизитов;
	
КонецФункции
	
&НаСервере
Функция ПроверитьЗаполнениеРеквизитов(МассивРеквизитов)

	Результат = Истина;
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл 
		ЗнЗаполненно = Ложь;
		КодИсполнения = СтрШаблон("ЗнЗаполненно = ЗначениеЗаполнено(%1)", ИмяРеквизита);
		Выполнить(КодИсполнения);
		Если Не ЗнЗаполненно Тогда 
			Результат = Ложь;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = СтрШаблон("Поле ""%1"" не заполнено.", ИмяРеквизита);
			СообщениеПользователю.Поле = ИмяРеквизита;
			СообщениеПользователю.Сообщить();
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПредставленияАдресаМаршрута()
	
	СтруктураАдреса = Новый Структура;	
	СтруктураАдреса.Вставить("value"			, Перевозка_АдресНаправления_Город);
	СтруктураАдреса.Вставить("comment"			, "");
	СтруктураАдреса.Вставить("type"				, "Адрес");
	СтруктураАдреса.Вставить("country"			, "Россия");
	СтруктураАдреса.Вставить("addressType"		, "ВСвободнойФорме");
	СтруктураАдреса.Вставить("countryCode"		, "");
	СтруктураАдреса.Вставить("ZIPcode"			, "");
	СтруктураАдреса.Вставить("area"				, "");
	СтруктураАдреса.Вставить("areaType"			, "");
	СтруктураАдреса.Вставить("city"				, "");
	СтруктураАдреса.Вставить("cityType"			, "");
	СтруктураАдреса.Вставить("street"			, "");
	СтруктураАдреса.Вставить("streetType"		, "");
	СтруктураАдреса.Вставить("id"				, "");
	СтруктураАдреса.Вставить("areaCode"			, "");
	СтруктураАдреса.Вставить("areaId"			, "");
	СтруктураАдреса.Вставить("district"			, "");
	СтруктураАдреса.Вставить("districtType"		, "");
	СтруктураАдреса.Вставить("districtId"		, "");
	СтруктураАдреса.Вставить("munDistrict"		, "");
	СтруктураАдреса.Вставить("munDistrictType"	, "");
	СтруктураАдреса.Вставить("munDistrictId"	, "");
	СтруктураАдреса.Вставить("cityId"			, "");
	СтруктураАдреса.Вставить("settlement"		, "");
	СтруктураАдреса.Вставить("settlementType"	, "");
	СтруктураАдреса.Вставить("settlementId"		, "");
	СтруктураАдреса.Вставить("cityDistrict"		, "");
	СтруктураАдреса.Вставить("cityDistrictType"	, "");
	СтруктураАдреса.Вставить("cityDistrictId"	, "");
	СтруктураАдреса.Вставить("territory"		, "");
	СтруктураАдреса.Вставить("territoryType"	, "");
	СтруктураАдреса.Вставить("territoryId"		, "");
	СтруктураАдреса.Вставить("locality"			, "");
	СтруктураАдреса.Вставить("localityType"		, "");
	СтруктураАдреса.Вставить("localityId"		, "");
	СтруктураАдреса.Вставить("streetId"			, "");
	СтруктураАдреса.Вставить("houseType"		, "");
	СтруктураАдреса.Вставить("houseNumber"		, "");
	СтруктураАдреса.Вставить("houseId"			, "");
	СтруктураАдреса.Вставить("buildings"		, Новый Структура);
	СтруктураАдреса.Вставить("apartments"		, Новый Структура);
	СтруктураАдреса.Вставить("codeKLADR"		, "");
	СтруктураАдреса.Вставить("oktmo"			, "");
	СтруктураАдреса.Вставить("okato"			, "");
	СтруктураАдреса.Вставить("asInDocument"		, "");
	СтруктураАдреса.Вставить("ifnsFLCode"		, "");
	СтруктураАдреса.Вставить("ifnsULCode"		, "");
	СтруктураАдреса.Вставить("ifnsFLAreaCode"	, "");
	СтруктураАдреса.Вставить("ifnsULAreaCode"	, "");
	СтруктураАдреса.Вставить("stead"			, "");
	СтруктураАдреса.Вставить("steadId"			, "");

	Возврат СтруктураАдреса;
	
КонецФункции

#КонецОбласти


#КонецОбласти
